/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

Theory of topological monoids.
-/
import topology.continuous_on
import group_theory.submonoid.basic
import algebra.group.prod
import topology.homeomorph

open classical set filter topological_space opposite
open_locale classical topological_space big_operators

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}

instance [m : topological_space Œ±] : topological_space Œ±·µí·µñ := m.coinduced op

lemma opposite_eq_induced [m : topological_space Œ±] : opposite.topological_space = m.induced unop :=
(induced_eq_coinduced equiv_to_opposite).symm

lemma continuous_op [topological_space Œ±] : continuous (op : Œ± ‚Üí Œ±·µí·µñ) := Œª _ h, h
lemma continuous_unop [topological_space Œ±] : continuous (unop : Œ±·µí·µñ ‚Üí Œ±) := Œª _ h, h

/-- The map `Œ± ‚âÉ Œ±·µí·µñ` is a homeomorphism. -/
def homeomorphm_to_opposite [topological_space Œ±] : Œ± ‚âÉ‚Çú Œ±·µí·µñ :=
{ continuous_to_fun := continuous_op,
  continuous_inv_fun := continuous_unop,
  ..equiv_to_opposite }

/-- Basic hypothesis to talk about a topological additive monoid or a topological additive
semigroup. A topological additive monoid over `Œ±`, for example, is obtained by requiring both the
instances `add_monoid Œ±` and `has_continuous_add Œ±`. -/
class has_continuous_add (Œ± : Type*) [topological_space Œ±] [has_add Œ±] : Prop :=
(continuous_add : continuous (Œªp:Œ±√óŒ±, p.1 + p.2))

/-- Basic hypothesis to talk about a topological monoid or a topological semigroup.
A topological monoid over `Œ±`, for example, is obtained by requiring both the instances `monoid Œ±` and
`has_continuous_mul Œ±`. -/
@[to_additive]
class has_continuous_mul (Œ± : Type*) [topological_space Œ±] [has_mul Œ±] : Prop :=
(continuous_mul : continuous (Œªp:Œ±√óŒ±, p.1 * p.2))

section has_continuous_mul

variables [topological_space Œ±] [has_mul Œ±] [has_continuous_mul Œ±]

@[to_additive]
lemma continuous_mul : continuous (Œªp:Œ±√óŒ±, p.1 * p.2) :=
has_continuous_mul.continuous_mul

@[to_additive, continuity]
lemma continuous.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) :
  continuous (Œªx, f x * g x) :=
continuous_mul.comp (hf.prod_mk hg)

attribute [continuity] continuous.add

@[to_additive]
lemma continuous_mul_left (a : Œ±) : continuous (Œª b:Œ±, a * b) :=
continuous_const.mul continuous_id

@[to_additive]
lemma continuous_mul_right (a : Œ±) : continuous (Œª b:Œ±, b * a) :=
continuous_id.mul continuous_const

@[to_additive]
lemma continuous_on.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {s : set Œ≤}
  (hf : continuous_on f s) (hg : continuous_on g s) :
  continuous_on (Œªx, f x * g x) s :=
(continuous_mul.comp_continuous_on (hf.prod hg) : _)

@[to_additive]
lemma tendsto_mul {a b : Œ±} : tendsto (Œªp:Œ±√óŒ±, p.fst * p.snd) (ùìù (a, b)) (ùìù (a * b)) :=
continuous_iff_continuous_at.mp has_continuous_mul.continuous_mul (a, b)

@[to_additive]
lemma filter.tendsto.mul {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {F : filter Œ≤} {a b : Œ±}
  (hf : tendsto f F (ùìù a)) (hg : tendsto g F (ùìù b)) :
  tendsto (Œªx, f x * g x) F (ùìù (a * b)) :=
tendsto_mul.comp (hf.prod_mk_nhds hg)

@[to_additive]
lemma continuous_at.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {x : Œ≤}
  (hf : continuous_at f x) (hg : continuous_at g x) :
  continuous_at (Œªx, f x * g x) x :=
hf.mul hg

@[to_additive]
lemma continuous_within_at.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {s : set Œ≤} {x : Œ≤}
  (hf : continuous_within_at f s x) (hg : continuous_within_at g s x) :
  continuous_within_at (Œªx, f x * g x) s x :=
hf.mul hg

@[to_additive]
instance [topological_space Œ≤] [has_mul Œ≤] [has_continuous_mul Œ≤] : has_continuous_mul (Œ± √ó Œ≤) :=
‚ü®((continuous_fst.comp continuous_fst).mul (continuous_fst.comp continuous_snd)).prod_mk
 ((continuous_snd.comp continuous_fst).mul (continuous_snd.comp continuous_snd))‚ü©

instance : has_continuous_mul Œ±·µí·µñ :=
{ continuous_mul := ((continuous_op.comp continuous_mul).comp continuous_swap).comp
  (continuous_unop.prod_map continuous_unop) }

end has_continuous_mul

section has_continuous_mul

variables [topological_space Œ±] [monoid Œ±] [has_continuous_mul Œ±]

@[to_additive]
lemma tendsto_list_prod {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {F : filter Œ≤} {g : Œ≥ ‚Üí Œ±} :
  ‚àÄl:list Œ≥, (‚àÄc‚ààl, tendsto (f c) F (ùìù (g c))) ‚Üí
    tendsto (Œªb, (l.map (Œªc, f c b)).prod) F (ùìù ((l.map g).prod))
| []       _ := by simp [tendsto_const_nhds]
| (f :: l) h :=
  begin
    simp only [list.map_cons, list.prod_cons],
    exact (h f (list.mem_cons_self _ _)).mul
      (tendsto_list_prod l (assume c hc, h c (list.mem_cons_of_mem _ hc)))
  end

@[to_additive]
lemma continuous_list_prod [topological_space Œ≤] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} (l : list Œ≥)
  (h : ‚àÄc‚ààl, continuous (f c)) :
  continuous (Œªa, (l.map (Œªc, f c a)).prod) :=
continuous_iff_continuous_at.2 $ assume x, tendsto_list_prod l $ assume c hc,
  continuous_iff_continuous_at.1 (h c hc) x

-- @[to_additive continuous_smul]
@[continuity]
lemma continuous_pow : ‚àÄ n : ‚Ñï, continuous (Œª a : Œ±, a ^ n)
| 0 := by simpa using continuous_const
| (k+1) := show continuous (Œª (a : Œ±), a * a ^ k), from continuous_id.mul (continuous_pow _)

@[continuity]
lemma continuous.pow {f : Œ≤ ‚Üí Œ±} [topological_space Œ≤] (h : continuous f) (n : ‚Ñï) :
  continuous (Œª b, (f b) ^ n) :=
continuous.comp (continuous_pow n) h

end has_continuous_mul

section

variables [topological_space Œ±] [comm_monoid Œ±]

@[to_additive]
lemma submonoid.mem_nhds_one (Œ≤ : submonoid Œ±) (oŒ≤ : is_open (Œ≤ : set Œ±)) :
  (Œ≤ : set Œ±) ‚àà ùìù (1 : Œ±) :=
mem_nhds_sets_iff.2 ‚ü®Œ≤, (by refl), oŒ≤, Œ≤.one_mem‚ü©

variable [has_continuous_mul Œ±]

@[to_additive]
lemma tendsto_multiset_prod {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {F : filter Œ≤} {a : Œ≥ ‚Üí Œ±} (s : multiset Œ≥) :
  (‚àÄc‚ààs, tendsto (f c) F (ùìù (a c))) ‚Üí
    tendsto (Œªb, (s.map (Œªc, f c b)).prod) F (ùìù ((s.map a).prod)) :=
by { rcases s with ‚ü®l‚ü©, simp, exact tendsto_list_prod l }

@[to_additive]
lemma tendsto_finset_prod {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {F : filter Œ≤} {a : Œ≥ ‚Üí Œ±} (s : finset Œ≥) :
  (‚àÄc‚ààs, tendsto (f c) F (ùìù (a c))) ‚Üí tendsto (Œªb, ‚àè c in s, f c b) F (ùìù (‚àè c in s, a c)) :=
tendsto_multiset_prod _

@[to_additive, continuity]
lemma continuous_multiset_prod [topological_space Œ≤] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} (s : multiset Œ≥) :
  (‚àÄc‚ààs, continuous (f c)) ‚Üí continuous (Œªa, (s.map (Œªc, f c a)).prod) :=
by { rcases s with ‚ü®l‚ü©, simp, exact continuous_list_prod l }

attribute [continuity] continuous_multiset_sum

@[to_additive, continuity]
lemma continuous_finset_prod [topological_space Œ≤] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} (s : finset Œ≥) :
  (‚àÄc‚ààs, continuous (f c)) ‚Üí continuous (Œªa, ‚àè c in s, f c a) :=
continuous_multiset_prod _

attribute [continuity] continuous_finset_sum

end
