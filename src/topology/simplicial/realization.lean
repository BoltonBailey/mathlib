/-
Copyleft 2020 Johan Commelin. No rights reserved.
Authors: Johan Commelin
-/

import category_theory.comma
import topology.simplicial.singular
import topology.category.Top

/-! # Geometric realization of simplicial types -/

noncomputable theory

universe variables u

open category_theory category_theory.limits

namespace sType
open Top function opposite

structure has_realization (S : sType.{u}) (Y : Top.{u}) :=
(hom : S ‚ü∂ singular.obj Y)
(w   : ‚àÄ X, bijective (Œª f : Y ‚ü∂ X, hom ‚â´ singular.map f))

def has_realization.map {S‚ÇÅ S‚ÇÇ : sType} {Y‚ÇÅ Y‚ÇÇ : Top}
  (h‚ÇÅ : S‚ÇÅ.has_realization Y‚ÇÅ) (h‚ÇÇ : S‚ÇÇ.has_realization Y‚ÇÇ) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) : Y‚ÇÅ ‚ü∂ Y‚ÇÇ :=
classical.some $ (h‚ÇÅ.w Y‚ÇÇ).2 (f ‚â´ h‚ÇÇ.hom)

@[simp, reassoc]
lemma has_realization.map_spec {S‚ÇÅ S‚ÇÇ : sType} {Y‚ÇÅ Y‚ÇÇ : Top}
  (h‚ÇÅ : S‚ÇÅ.has_realization Y‚ÇÅ) (h‚ÇÇ : S‚ÇÇ.has_realization Y‚ÇÇ) (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) :
  h‚ÇÅ.hom ‚â´ singular.map (h‚ÇÅ.map h‚ÇÇ f) = f ‚â´ h‚ÇÇ.hom :=
classical.some_spec $ (h‚ÇÅ.w Y‚ÇÇ).2 (f ‚â´ h‚ÇÇ.hom)

@[simp] lemma has_realization.map_id {S : sType} {Y : Top} (h : S.has_realization Y) :
  h.map h (ùüô S) = ùüô Y :=
by { apply (h.w _).1, simp [h.map_spec h (ùüô S)], }

lemma has_realization.map_comp {S‚ÇÅ S‚ÇÇ S‚ÇÉ : sType} {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Top}
  (h‚ÇÅ : S‚ÇÅ.has_realization Y‚ÇÅ) (h‚ÇÇ : S‚ÇÇ.has_realization Y‚ÇÇ) (h‚ÇÉ : S‚ÇÉ.has_realization Y‚ÇÉ)
  (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) (g : S‚ÇÇ ‚ü∂ S‚ÇÉ) :
  h‚ÇÅ.map h‚ÇÉ (f ‚â´ g) = h‚ÇÅ.map h‚ÇÇ f ‚â´ h‚ÇÇ.map h‚ÇÉ g :=
begin
  apply (h‚ÇÅ.w _).1,
  simp only [has_realization.map_spec, has_realization.map_spec_assoc,
    functor.map_comp, category.assoc],
end

lemma singular_standard_simplex_has_realization (n : NonemptyFinLinOrd) :
  has_realization (standard_simplex.obj n) (singular_standard_simplex.obj n) :=
{ hom := (yoneda_hom_comp_yoneda singular_standard_simplex).app n,
  w   :=
  begin
    intro X,
    split,
    { intros f g h,
      dsimp at h,
      rw [nat_trans.ext_iff, funext_iff] at h,
      specialize h (op n),
      rw [funext_iff] at h,
      specialize h (ùüô n),
      dsimp at h,
      change singular_standard_simplex.map (ùüô n) ‚â´ f = singular_standard_simplex.map (ùüô n) ‚â´ g at h,
      rwa [singular_standard_simplex.map_id, category.id_comp f, category.id_comp g] at h, },
    { intros f,
      let g : _ := _,
      refine ‚ü®g, _‚ü©,
      { ext1, ext1 m, dsimp [singular],
        ext1 i, change unop m ‚ü∂ n at i,
        ext1 x,
        dsimp, sorry },
      {  } },
  end }

open simplex_category opposite

def category_of_simplices (X : sType.{u}) : Type u :=
Œ£ (n : simplex_category), (skeletal_functor.{u}.op ‚ãô X).obj (op n)

-- The following definition has universe issues
-- Œ£ (n : simplex_category), (skeletal_functor.{u}.op ‚ãô X).obj (op n)

namespace category_of_simplices
variables (X : sType.{u})

-- slow, sigh
-- instance : small_category (category_of_simplices X) :=
-- { hom := Œª s t, ulift { f : s.1 ‚ü∂ t.1 // (skeletal_functor.{u}.op ‚ãô X).map f.op t.2 = s.2 },
--   id := Œª s, ‚ü®‚ü®ùüô _, by tidy‚ü©‚ü©,
--   comp := Œª _ _ _ f g, ‚ü®‚ü®f.down.1 ‚â´ g.down.1, by tidy‚ü©‚ü© }

end category_of_simplices

set_option pp.universes true

#print category_of_simplices.category

-- def realization_obj (X : sType.{u}) : Top.{u} :=
-- begin
--   refine colimit _,
-- end

/-- The geometric realization of a simplicial type.
This functor is left adjoint to `Top.singular`. -/
@[simps]
def realization : sType.{u} ‚•§ Top.{u} :=
{ obj := Œª X, by extract_goal realization_obj,
  map := _,
  map_id' := _,
  map_comp' := _ }


end sType
