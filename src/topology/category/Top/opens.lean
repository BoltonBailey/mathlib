/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import topology.category.Top.basic
import category_theory.eq_to_hom
import category_theory.limits.preserves
import category_theory.limits.lattice
import topology.opens

open category_theory
open category_theory.limits
open topological_space
open opposite

universes v u

namespace topological_space.opens

variables {X Y Z : Top.{u}}

instance opens_category : category.{u} (opens X) :=
{ hom  := Œª U V, ulift (plift (U ‚â§ V)),
  id   := Œª X, ‚ü® ‚ü® le_refl X ‚ü© ‚ü©,
  comp := Œª X Y Z f g, ‚ü® ‚ü® le_trans f.down.down g.down.down ‚ü© ‚ü© }

def to_Top (X : Top.{u}) : opens X ‚•§ Top :=
{ obj := Œª U, ‚ü®U.val, infer_instance‚ü©,
  map := Œª U V i, ‚ü®Œª x, ‚ü®x.1, i.down.down x.2‚ü©,
    (embedding.continuous_iff embedding_subtype_val).2 continuous_induced_dom‚ü© }.

lemma eq_of_iso {U V : opens X} (i : U ‚âÖ V) : U = V :=
opens.ext (set.ext (Œª x, ‚ü®Œª h, i.hom.down.down h, Œª h, i.inv.down.down h‚ü©))

lemma op_eq_of_iso {U V : (opens X)·µí·µñ} (i : U ‚âÖ V) : U = V :=
begin
  -- TODO why isn't the op_induction tactic working here?
  revert i,
  revert U,
  apply @opposite.op_induction (opens X) (Œª U, (U ‚âÖ V) ‚Üí (U = V)),
  intro U,
  revert V,
  apply @opposite.op_induction (opens X) (Œª V, ((op U) ‚âÖ V) ‚Üí ((op U) = V)),
  intro V,
  intro i,
  congr,
  apply eq_of_iso,
  exact i.unop.symm,
end

/-- `opens.map f` gives the functor from open sets in Y to open set in X,
    given by taking preimages under f. -/
def map (f : X ‚ü∂ Y) : opens Y ‚•§ opens X :=
{ obj := Œª U, ‚ü® f ‚Åª¬π' U.val, f.continuous _ U.property ‚ü©,
  map := Œª U V i, ‚ü® ‚ü® Œª a b, i.down.down b ‚ü© ‚ü© }.

@[simp] lemma map_obj (f : X ‚ü∂ Y) (U) (p) : (map f).obj ‚ü®U, p‚ü© = ‚ü® f ‚Åª¬π' U, f.continuous _ p ‚ü© :=
rfl

@[simp] lemma map_obj_val (f : X ‚ü∂ Y) (U) : ((map f).obj U).val = f.val ‚Åª¬π' U.val := rfl

@[simp] lemma map_id_obj' (U) (p) : (map (ùüô X)).obj ‚ü®U, p‚ü© = ‚ü®U, p‚ü© :=

@[simp] lemma map_id_obj (U : opens X) : (map (ùüô X)).obj U = U :=
by { ext, refl } -- not quite `rfl`, since we don't have eta for records

@[simp] lemma map_id_obj' (U) (p) : (map (ùüô X)).obj ‚ü®U, p‚ü© = ‚ü®U, p‚ü© :=
rfl

@[simp] lemma map_id_obj_unop (U : (opens X)·µí·µñ) : (map (ùüô X)).obj (unop U) = unop U :=
by simp
@[simp] lemma op_map_id_obj (U : (opens X)·µí·µñ) : (map (ùüô X)).op.obj U = U :=
by simp

section
variable (X)
def map_id : map (ùüô X) ‚âÖ ùü≠ (opens X) :=
{ hom := { app := Œª U, eq_to_hom (map_id_obj U) },
  inv := { app := Œª U, eq_to_hom (map_id_obj U).symm } }

@[simp] lemma map_id_hom_app (U) : (map_id X).hom.app U = eq_to_hom (map_id_obj U) := rfl
@[simp] lemma map_id_inv_app (U) : (map_id X).inv.app U = eq_to_hom (map_id_obj U).symm := rfl
end

@[simp] lemma map_comp_obj (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map (f ‚â´ g)).obj U = (map f).obj ((map g).obj U) :=
by { ext, refl } -- not quite `rfl`, since we don't have eta for records

@[simp] lemma map_comp_obj' (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) (p) :
  (map (f ‚â´ g)).obj ‚ü®U, p‚ü© = (map f).obj ((map g).obj ‚ü®U, p‚ü©) :=
rfl

@[simp] lemma map_comp_obj_unop (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map (f ‚â´ g)).obj (unop U) = (map f).obj ((map g).obj (unop U)) :=
by simp
@[simp] lemma op_map_comp_obj (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map (f ‚â´ g)).op.obj U = (map f).op.obj ((map g).op.obj U) :=
by simp

def map_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : map (f ‚â´ g) ‚âÖ map g ‚ãô map f :=
{ hom := { app := Œª U, eq_to_hom (map_comp_obj f g U) },
  inv := { app := Œª U, eq_to_hom (map_comp_obj f g U).symm } }

@[simp] lemma map_comp_hom_app (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map_comp f g).hom.app U = eq_to_hom (map_comp_obj f g U) := rfl
@[simp] lemma map_comp_inv_app (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map_comp f g).inv.app U = eq_to_hom (map_comp_obj f g U).symm := rfl

/-- The preimage of a union is the union of the preimages. -/
-- TODO surely we can just use this fact, already proved somewhere about sets...
lemma map_supr (f : X ‚ü∂ Y) {Œ±} (Œπ : Œ± ‚Üí opens Y) : (map f).obj (lattice.supr Œπ) = lattice.supr ((map f).obj ‚àò Œπ) :=
begin
  ext,
  split,
  { rintro ‚ü®_, ‚ü®‚ü®_, ‚ü®‚ü®z, rfl‚ü©, rfl‚ü©‚ü©, p‚ü©‚ü©,
    exact opens.mem_of_subset_of_mem (lattice.le_supr ((map f).obj ‚àò Œπ) z) p },
  { rintro ‚ü®U, ‚ü®V, ‚ü®‚ü®t, rfl‚ü©, rfl‚ü©‚ü©, q‚ü©,
    apply set.mem_of_subset_of_mem (lattice.le_supr Œπ t) q, }
end

def is_colimit_iff_supr {J : Type u} [small_category J] {F : J ‚•§ opens X} (c : cocone F) :
  is_colimit c ‚âÉ c.X = lattice.supr F.obj :=
{ to_fun := Œª h, eq_of_iso (cocones.forget.map_iso (is_colimit.unique h (colimit.is_colimit F))),
  inv_fun := Œª h, is_colimit.of_iso_colimit (colimit.is_colimit F)
    { hom := { hom := begin rw h, exact ùüô _, end }, inv := { hom := begin rw h, exact ùüô _, end } },
  left_inv := by tidy,
  right_inv := by tidy, }

instance (f : X ‚ü∂ Y) : preserves_colimits (map f) :=
‚ü®Œª J ùí•, by exactI ‚ü®Œª K, ‚ü®Œª c is_colimit, begin
  apply (is_colimit_iff_supr _).inv_fun,
  have t := congr_arg (map f).obj ((is_colimit_iff_supr c).to_fun is_colimit),
  rw map_supr at t,
  exact t,
end‚ü©‚ü©‚ü©

-- We could make f g implicit here, but it's nice to be able to see when
-- they are the identity (often!)
def map_iso (f g : X ‚ü∂ Y) (h : f = g) : map f ‚âÖ map g :=
nat_iso.of_components (Œª U, eq_to_iso (congr_fun (congr_arg functor.obj (congr_arg map h)) U) )
  (by obviously)

@[simp] lemma map_iso_refl (f : X ‚ü∂ Y) (h) : map_iso f f h = iso.refl (map _) := rfl

@[simp] lemma map_iso_hom_app (f g : X ‚ü∂ Y) (h : f = g) (U : opens Y) :
  (map_iso f g h).hom.app U = eq_to_hom (congr_fun (congr_arg functor.obj (congr_arg map h)) U) :=
rfl

@[simp] lemma map_iso_inv_app (f g : X ‚ü∂ Y) (h : f = g) (U : opens Y) :
  (map_iso f g h).inv.app U =
     eq_to_hom (congr_fun (congr_arg functor.obj (congr_arg map h.symm)) U) :=
rfl

end topological_space.opens
