import ring_theory.witt_vector.basic

/-! ## Teichm√ºller lifts -/

namespace witt_vector

variables (p : ‚Ñï) {R S : Type*} [hp : fact p.prime] [comm_ring R] [comm_ring S]
local notation `ùïé` := witt_vector p -- type as `\bbW`

local attribute [semireducible] witt_vector
local attribute [instance] mv_polynomial.invertible_rat_coe_nat

def teichmuller_fun (r : R) : ùïé R
| 0 := r
| (n+1) := 0

include hp

private lemma ghost_component_teichmuller_fun (r : R) (n : ‚Ñï) :
  ghost_component n (teichmuller_fun p r) = r ^ p ^ n :=
begin
  rw [ghost_component, aeval_witt_polynomial, finset.sum_eq_single 0, pow_zero, one_mul, nat.sub_zero],
  { refl },
  { intros i hi h0,
    convert mul_zero _, convert zero_pow _,
    { cases i, { contradiction }, { refl } },
    { apply nat.pow_pos, apply nat.prime.pos, assumption } },
  { rw finset.mem_range, intro h, exact (h (nat.succ_pos n)).elim }
end

/-- teichmuller is a natural transformation -/
private lemma map_teichmuller_fun (f : R ‚Üí+* S) (r : R) :
  map f (teichmuller_fun p r) = teichmuller_fun p (f r) :=
by { ext n, cases n, { refl }, { exact f.map_zero } }

private lemma teichmuller_mul_aux‚ÇÅ (x y : mv_polynomial R ‚Ñö) :
  teichmuller_fun p (x * y) = teichmuller_fun p x * teichmuller_fun p y :=
begin
  apply (ghost_map.bijective_of_invertible p (mv_polynomial R ‚Ñö)).1,
  rw ring_hom.map_mul,
  ext1 n,
  simp only [pi.mul_apply, ghost_map_apply, ghost_component_teichmuller_fun, mul_pow],
end

private lemma teichmuller_mul_aux‚ÇÇ (x y : mv_polynomial R ‚Ñ§) :
  teichmuller_fun p (x * y) = teichmuller_fun p x * teichmuller_fun p y :=
begin
  refine map_injective (mv_polynomial.map (int.cast_ring_hom ‚Ñö))
    (mv_polynomial.coe_int_rat_map_injective _) _,
  simp only [teichmuller_mul_aux‚ÇÅ, map_teichmuller_fun, ring_hom.map_mul]
end

noncomputable def teichmuller : R ‚Üí* ùïé R :=
{ to_fun := teichmuller_fun p,
  map_one' :=
  begin
    ext ‚ü®‚ü©,
    { rw one_coeff_zero, refl },
    { rw one_coeff_pos _ _ _ (nat.succ_pos n), refl }
  end,
  map_mul' :=
  begin
    intros x y,
    rcases counit_surjective R x with ‚ü®x, rfl‚ü©,
    rcases counit_surjective R y with ‚ü®y, rfl‚ü©,
    simp only [‚Üê map_teichmuller_fun, ‚Üê ring_hom.map_mul, teichmuller_mul_aux‚ÇÇ],
  end }

@[simp] lemma teichmuller_coeff_zero (r : R) :
  (teichmuller p r).coeff 0 = r := rfl

@[simp] lemma teichmuller_coeff_pos (r : R) :
  ‚àÄ (n : ‚Ñï) (hn : 0 < n), (teichmuller p r).coeff n = 0
| (n+1) _ := rfl.

@[simp] lemma teichmuller_zero : teichmuller p (0:R) = 0 :=
by ext ‚ü®‚ü©; { rw zero_coeff, refl }

/-- teichmuller is a natural transformation -/
@[simp] lemma map_teichmuller (f : R ‚Üí+* S) (r : R) :
  map f (teichmuller p r) = teichmuller p (f r) :=
map_teichmuller_fun _ _ _

@[simp] lemma ghost_component_teichmuller (r : R) (n : ‚Ñï) :
  ghost_component n (teichmuller p r) = r ^ p ^ n :=
ghost_component_teichmuller_fun _ _ _

end witt_vector
