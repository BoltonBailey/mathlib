import ring_theory.witt_vector.basic

namespace witt_vector

variables {p : ‚Ñï} {R S œÉ idx : Type*} [hp : fact p.prime] [comm_ring R] [comm_ring S]

local notation `ùïé` := witt_vector p -- type as `\bbW`

local attribute [semireducible] witt_vector
local attribute [instance] mv_polynomial.invertible_rat_coe_nat

open mv_polynomial
local attribute [-simp] coe_eval‚ÇÇ_hom

include hp
variables (p)

section sub_coeff

lemma sub_def (x y : ùïé R) : x - y =  Œª n,
  aeval
    (Œª bn : bool √ó ‚Ñï, cond bn.1 (x.coeff bn.2)
      (aeval (Œª m : unit √ó ‚Ñï, (y.coeff m.2)) (witt_neg p bn.2)))
    (witt_add p n) :=
rfl

noncomputable def Sub : ‚Ñï ‚Üí mv_polynomial (bool √ó ‚Ñï) ‚Ñ§ :=
Œª n, bind‚ÇÅ (function.uncurry $ Œª b, cond b
    (Œª k, X (tt, k))
    (Œª k, rename (Œª un : unit √ó ‚Ñï, (ff, un.2)) (witt_neg p k)))
  (witt_add p n)

lemma sub_eq (x y : ùïé R) (n : ‚Ñï) :
  (x - y).coeff n =
  aeval (Œª bn : bool √ó ‚Ñï, cond bn.1 (x.coeff bn.2) (y.coeff bn.2)) (Sub p n) :=
begin
  dsimp [Sub],
  show aeval (Œª bn : bool √ó ‚Ñï, cond bn.1 (x.coeff bn.2)
    (aeval (Œª m : unit √ó ‚Ñï, (y.coeff m.2)) (witt_neg p bn.2))) (witt_add p n) = _,
  conv_rhs { rw [aeval_eq_eval‚ÇÇ_hom, hom_bind‚ÇÅ] },
  apply eval‚ÇÇ_hom_congr (ring_hom.ext_int _ _) _ rfl,
  ext ‚ü®‚ü®‚ü©, k‚ü©; dsimp [function.uncurry],
  { rw eval‚ÇÇ_hom_rename,
    apply eval‚ÇÇ_hom_congr (ring_hom.ext_int _ _) _ rfl,
    ext ‚ü®‚ü®‚ü©, i‚ü©, refl },
  { rw eval‚ÇÇ_hom_X', refl, }
end

lemma Sub_eq : Sub p = witt_sub p :=
begin
  apply eq_witt_structure_int,
  intro n,
  erw [Sub, ‚Üê bind‚ÇÅ_bind‚ÇÅ, witt_structure_int_prop p (X tt + X ff) n, bind‚ÇÅ_bind‚ÇÅ],
  rw [alg_hom.map_add, alg_hom.map_sub, sub_eq_add_neg, ‚Üê alg_hom.map_neg],
  apply congr‚ÇÇ,
  { rw [bind‚ÇÅ_X_right, bind‚ÇÅ_X_right, bind‚ÇÅ_rename],
    apply eval‚ÇÇ_hom_congr (ring_hom.ext_int _ _) _ rfl,
    ext1 i,
    refl },
  { rw [‚Üê witt_structure_int_prop p (- X ff), bind‚ÇÅ_X_right, bind‚ÇÅ_rename],
    apply eval‚ÇÇ_hom_congr (ring_hom.ext_int _ _) _ rfl,
    ext1 i,
    dsimp [function.uncurry],
    rw witt_neg,
    apply mv_polynomial.map_injective (int.cast_ring_hom ‚Ñö) int.cast_injective,
    simp only [map_rename, map_witt_structure_int, map_X, ring_hom.map_neg],
    simp only [witt_structure_rat, rename_bind‚ÇÅ, rename_rename,
      alg_hom.map_neg, ring_hom.map_neg, bind‚ÇÅ_X_right], }
end

lemma sub_coeff (x y : ùïé R) (n : ‚Ñï) :
  (x - y).coeff n =
  aeval (Œª bn : bool √ó ‚Ñï, cond bn.1 (x.coeff bn.2) (y.coeff bn.2)) (witt_sub p n) :=
by rw [‚Üê Sub_eq, sub_eq]

end sub_coeff

end witt_vector
