import ring_theory.witt_vector.truncated
import data.padics.ring_homs

/-!

# Comparison isomorphism between `witt_vector (zmod p)` and `‚Ñ§_[p]`

-/

noncomputable theory

namespace witt_vector
open truncated_witt_vector

variables (p : ‚Ñï) [hp : fact p.prime]
include hp

local notation `ùïé` := witt_vector p -- type as `\bbW`

def to_zmod_pow (k : ‚Ñï) : ùïé (zmod p) ‚Üí+* zmod (p ^ k) :=
(zmod_equiv_trunc p k).symm.to_ring_hom.comp (truncate p k)

lemma to_zmod_pow_compat (m n : ‚Ñï) (h : m ‚â§ n) :
  (zmod.cast_hom (show p ^ m ‚à£ p ^ n, by { simpa using pow_dvd_pow p h }) (zmod (p ^ m))).comp ((Œª (k : ‚Ñï), to_zmod_pow p k) n) =
    (Œª (k : ‚Ñï), to_zmod_pow p k) m :=
begin
  unfold to_zmod_pow,
  rw [‚Üê ring_hom.comp_assoc, ‚Üê commutes_symm p _ h],
  refl
end

def to_padic_int : ùïé (zmod p) ‚Üí+* ‚Ñ§_[p] :=
-- I think the family should be an explicit argument of `lift`,
-- for increased readability.
padic_int.lift (Œª m n h, to_zmod_pow_compat p m n h)

lemma zmod_equiv_trunc_compat (k‚ÇÅ k‚ÇÇ : ‚Ñï) (hk : k‚ÇÅ ‚â§ k‚ÇÇ) :
    (truncated_witt_vector.truncate p (zmod p) hk).comp
        ((zmod_equiv_trunc p k‚ÇÇ).to_ring_hom.comp
           (padic_int.to_zmod_pow k‚ÇÇ)) =
      (zmod_equiv_trunc p k‚ÇÅ).to_ring_hom.comp (padic_int.to_zmod_pow k‚ÇÅ) :=
begin
  rw [‚Üê ring_hom.comp_assoc, commutes, ring_hom.comp_assoc, padic_int.zmod_cast_comp_to_zmod_pow],
  assumption
end

def from_padic_int : ‚Ñ§_[p] ‚Üí+* ùïé (zmod p) :=
truncated_witt_vector.lift (Œª k, (zmod_equiv_trunc p k).to_ring_hom.comp (padic_int.to_zmod_pow k)) $
  zmod_equiv_trunc_compat _

lemma to_padic_int_comp_from_padic_int :
  (to_padic_int p).comp (from_padic_int p) = ring_hom.id ‚Ñ§_[p] :=
begin
  rw ‚Üê padic_int.to_zmod_pow_eq_iff_ext,
  intro n,
  rw [‚Üê ring_hom.comp_assoc, to_padic_int, padic_int.lift_spec],
  simp only [from_padic_int, to_zmod_pow, ring_hom.comp_id],
  rw [ring_hom.comp_assoc, truncate_comp_lift, ‚Üê ring_hom.comp_assoc],
  convert ring_hom.id_comp _,
end

lemma from_padic_int_comp_to_padic_int :
  (from_padic_int p).comp (to_padic_int p) = ring_hom.id (ùïé (zmod p)) :=
begin
  apply witt_vector.hom_ext,
  intro n,
  rw [from_padic_int, ‚Üê ring_hom.comp_assoc, truncate_comp_lift, ring_hom.comp_assoc],
  simp only [to_padic_int, to_zmod_pow, ring_hom.comp_id],
  rw [padic_int.lift_spec, ‚Üê ring_hom.comp_assoc],
  convert ring_hom.id_comp _,
  ext1, simp
end

def equiv : ùïé (zmod p) ‚âÉ+* ‚Ñ§_[p] :=
{ to_fun := to_padic_int p,
  inv_fun := from_padic_int p,
  left_inv := Œª x, show (from_padic_int p).comp (to_padic_int p) x = _,
              by rw from_padic_int_comp_to_padic_int; refl,
  right_inv := Œª x, show (to_padic_int p).comp (from_padic_int p) x = _,
              by rw to_padic_int_comp_from_padic_int; refl,
  map_mul' := ring_hom.map_mul _,
  map_add' := ring_hom.map_add _ }

end witt_vector
