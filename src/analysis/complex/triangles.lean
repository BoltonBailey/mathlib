import analysis.complex.basic
import data.zmod.basic
import measure_theory.interval_integral

noncomputable theory

open_locale classical
open_locale nnreal
open_locale big_operators
open_locale topological_space
open set function finset
open complex

/-- A triangle is a function from `‚Ñ§/3‚Ñ§` to `‚ÑÇ` (this definition allows for the description of
adjacent vertices as `i` and `i + 1`, cyclically). -/
def triangle := zmod 3 ‚Üí ‚ÑÇ

/-- Given a function `f : ‚ÑÇ ‚Üí ‚ÑÇ`, the contour integral of `f` along the segment from `a` to `b` is
defined to be the (real) integral from `0` to `1` of the function
`Œª t, f ((1 - t) * a + t * b) * (b - a)`. -/
def contour_integral_segment (f : ‚ÑÇ ‚Üí ‚ÑÇ) (a b : ‚ÑÇ) : ‚ÑÇ :=
‚à´ (t : ‚Ñù) in 0..1, f ((1 - t) * a + t * b) * (b - a)

/-- The contour integral of a constant `c` along the segment from `a` to `b` is `c * (b - a)`. -/
lemma contour_integral_segment.integral_const (c : ‚ÑÇ) (a b : ‚ÑÇ) :
  contour_integral_segment (Œª z, c) a b = c * (b - a) :=
by --show_term {
  simp [contour_integral_segment, interval_integral.integral_const] --}

/-- Given a function `f : ‚ÑÇ ‚Üí ‚ÑÇ`, the contour integral of `f` around a triangle is defined to be the
sum of the contour integrals along the three segments forming its sides. -/
def contour_integral (f : ‚ÑÇ ‚Üí ‚ÑÇ) (T : triangle) : ‚ÑÇ :=
‚àë i, contour_integral_segment f (T i) (T (i + 1))

/-- The contour integral of a constant `c` around a triangle is `0`. -/
lemma contour_integral.integral_const (c : ‚ÑÇ) (T : triangle) : contour_integral (Œª z, c) T = 0 :=
begin
  rw contour_integral,
  --rw contour_integral_segment.integral_const,
  simp only [contour_integral, contour_integral_segment.integral_const],
  calc ‚àë i, c * (T (i + 1) - T i)
      =  ‚àë i, (c * T (i + 1) - c * T i) : _ -- by { congr, ext; ring }
  ... = c * (‚àë i, T (i + 1)) - c * (‚àë i, T i) : _ -- by simp [mul_sum]
  ... = 0 : _,

  {
    congr,
    ext i,
    ring,
    ring,
  },

  {
    --squeeze_simp [mul_sum],
    simp [mul_sum],
  },


  rw sub_eq_zero,
  congr' 1,



  exact (equiv.add_left (1 : zmod 3)).sum_comp _
end



/-- The function partitioning a triangle into four smaller triangles, parametrized by `‚Ñ§/3‚Ñ§` (one
for each of the three corner triangles) and `none` (for the centre triangle). -/
def quadrisect (T : triangle) : option (zmod 3) ‚Üí triangle
| none := Œª j, ((‚àë i, T i) - T j) / 2
| (some i) := Œª j, (T i + T j) / 2

/-- The integral of a function over a triangle is the sum of the four subdivided triangles
-/
lemma foo (f : ‚ÑÇ ‚Üí ‚ÑÇ ) (T : triangle ) :
  contour_integral f T = ‚àë i, contour_integral f (quadrisect T i)
  :=
begin
  /- Adrian? -/
  sorry,
end


/-- The integral of a function over a triangle is bounded by the maximal of the four subdivided triangles
-/
lemma foo2 (f : ‚ÑÇ ‚Üí ‚ÑÇ ) (T : triangle ) :
  abs (contour_integral f T) ‚â§
  4 * Sup (set.range (Œª i, abs ( contour_integral f (quadrisect T i)))) :=
begin
  /- AK? -/
  sorry,
end

/--  ‚à´_a^b F' = F(b)-F(a)
-/
lemma foo3 (F: ‚ÑÇ ‚Üí ‚ÑÇ ) (holc: differentiable ‚ÑÇ F) (a b :‚ÑÇ ) :
  contour_integral_segment (deriv F) a b =
  F b - F a :=
begin
  /- Adrian? -/
  sorry,
end


/--  ‚à´_T F' = 0
-/
lemma foo3a (F: ‚ÑÇ ‚Üí ‚ÑÇ ) (holc: differentiable ‚ÑÇ F) (T: triangle ) :
  contour_integral (deriv F) T = 0 :=
begin
  /- AK -/
  sorry,
end

def triangle_hull (T: triangle): set ‚ÑÇ  := convex_hull (set.range T )

def max_side_length (T: triangle ) : ‚Ñù := Sup (set.range (Œª i, abs (T (i+1) - T i)))

lemma foo5 (T:triangle )
  (z w : ‚ÑÇ ) (hz: z ‚àà  triangle_hull T) (hw: w ‚àà  triangle_hull T) :
  dist z w ‚â§ max_side_length T :=
begin
  /- HM -/
  sorry,
end

lemma foo4 (T:triangle ) (i k : zmod 3) (j : option (zmod 3)) :
  abs ( T i -  (quadrisect T j k)) ‚â§ max_side_length T :=
begin
  /- AK -/
  sorry,
end

lemma foo6 (T:triangle ) (j : option (zmod 3)) :
  max_side_length (quadrisect T j) =
  max_side_length T / 2 :=
begin
  /- AK -/
  sorry,
end

/- NEXT TIME -/

theorem Goursat (f : ‚ÑÇ ‚Üí  ‚ÑÇ ) (holc: differentiable ‚ÑÇ f) (T‚ÇÄ : triangle ) :
  contour_integral f T‚ÇÄ  = 0 :=
begin

/-

theorem Goursat (f : ‚ÑÇ ‚Üí  ‚ÑÇ ) (holc: differentiable ‚ÑÇ f) (T: triangle ) :
  contour_integral f T = 0 :=
begin

  have : ‚àÄ n , ‚àÄ (T' :triangle ) , ‚àÉ (T'' : triangle), -- ‚àÉ j : option (zmod 3) ,
--    T'' = quadrisect T' j ‚àß
    abs ( contour_integral f T') ‚â§ 4^n * abs (contour_integral f T'')
    ‚àß
    max_side_length T'' ‚â§ 1/4^n * max_side_length T'
    ‚àß
    convex_hull T'' ‚äÇ convex_hull T'
    ,
    {
      sorry,
    },
  choose! T_seq  -- i h h' using this,
   H using this,

  let X := Œª n, nat.rec_on n T _  _,
    --(Œª n T, (T_seq n T) (H n T)),

  sorry,
end
-/

  have : ‚àÄ n , ‚àÄ (T' :triangle ) , ‚àÉ (T'' : triangle), ‚àÉ j : option (zmod 3) ,
    T'' = quadrisect T' j ‚àß
    abs ( contour_integral f T') ‚â§ 4^n * abs (contour_integral f T''),
    {
      sorry,
    },
  choose! T   i h h' using this,
   --H using this,

  let X : ‚Ñï ‚Üí (triangle √ó ( option (zmod 3))) := Œª n, nat.rec_on n ‚ü®T‚ÇÄ ,none‚ü©
   (Œª n p, ‚ü® T n p.1, i n p.1‚ü© ),
    --(Œª n T, (T_seq n T) (H n T)),

  let T_seq : ‚Ñï ‚Üí triangle := Œª n, (X n).1,
  let i_seq : ‚Ñï ‚Üí option (zmod 3) := Œª n, (X n).2,

  have diameter : ‚àÄ n m, ‚àÄ i j,
    dist (T_seq n i) (T_seq m j) ‚â§ max_side_length T‚ÇÄ / 2^(min n m),
    {

      sorry,
    },

  obtain ‚ü® z, hz‚ü©  : ‚àÉ z , filter.tendsto (Œª n, T_seq n 0) filter.at_top (ùìù z),
  {
    sorry,
  },


  have lim_pt : ‚àÉ z:‚ÑÇ , ‚àÄ n, z ‚àà triangle_hull (T_seq n),
  {
    use z,
    intros,
    sorry,
  },

  have localize := (holc z).has_deriv_at ,
  rw has_deriv_at_iff_is_o_nhds_zero  at  localize,

  sorry,
end

/--
  |‚à´_Œ≥ f| ‚â§ ‚äî |f|
-/


/--

  in a neighborhood of z,
  f(w) = f(z) + f'(z) (w-z) + Err

-/
