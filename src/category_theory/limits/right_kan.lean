/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.punit
import category_theory.limits.functor_category

namespace category_theory
noncomputable theory

open category limits

universes v u‚ÇÅ u‚ÇÇ u‚ÇÉ
variables {C : Type v} {C' : Type u‚ÇÇ} {D : Type u‚ÇÉ}
variables [category.{v} C] [category.{v} C'] [category.{v} D]

@[simps]
def left_kan_obj (p : C ‚•§ C') (F : C ‚•§ D) [has_colimits D] :
  C' ‚•§ D :=
{ obj := Œª c', colimit (comma.fst p (functor.from_punit c') ‚ãô F),
  map := Œª X Y f,
    colimit.pre (comma.fst p (functor.from_punit Y) ‚ãô F) (comma.map_right _ ((functor.const _).map f)),
  map_id' := Œª X,
  begin
    ext j,
    rw colimit.Œπ_pre,
    erw comp_id,
    congr' 1,
    cases j,
    simp [comma.map_right],
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext j,
    rw colimit.Œπ_pre,
    change _ = colimit.Œπ (comma.map_right p ((functor.const (discrete punit)).map f) ‚ãô comma.fst p (functor.from_punit Y) ‚ãô F) j ‚â´ _ ‚â´ _,
    rw colimit.Œπ_pre_assoc,
    -- change _ = colimit.Œπ _
    change _ = colimit.Œπ (comma.fst p (functor.from_punit Y) ‚ãô F) ((comma.map_right p ((functor.const (discrete punit)).map f)).obj j) ‚â´ _,
    change _ = colimit.Œπ ((comma.map_right p ((functor.const (discrete punit)).map g)) ‚ãô comma.fst p (functor.from_punit Z) ‚ãô F) ((comma.map_right p ((functor.const (discrete punit)).map f)).obj j) ‚â´ _,
    rw colimit.Œπ_pre,
    congr' 1,
    cases j,
    dsimp [comma.map_right],
    congr' 1,
    simp,
  end }

def left_kan_equiv [has_colimits D] (p : C ‚•§ C') (F : C ‚•§ D) (G : C' ‚•§ D) :
  (left_kan_obj p F ‚ü∂ G) ‚âÉ (F ‚ü∂ ((whiskering_left _ _ _).obj p).obj G) :=
{ to_fun := Œª f,
  { app := Œª X,
    begin
      apply _ ‚â´ f.app _,
      apply colimit.Œπ (comma.fst p (functor.from_punit (p.obj X)) ‚ãô F) ‚ü®X, ‚ü®‚ü©, ùüô _‚ü©,
    end,
    naturality' := Œª X Y g,
    begin
      dsimp,
      rw [assoc],
      rw ‚Üê f.naturality (p.map g),
      dsimp,
      have := colimit.Œπ_pre (comma.fst p (functor.from_punit (p.obj Y)) ‚ãô F) (comma.map_right p ((functor.const (discrete punit)).map (p.map g))) ‚ü®X, punit.star, ùüô _‚ü©,
      dsimp at this,
      erw reassoc_of this,
      rw ‚Üê assoc,
      congr' 1,
      have q := colimit.w (comma.fst p (functor.from_punit (p.obj Y)) ‚ãô F),
      dsimp at q,
      specialize q (‚ü®g, _, _‚ü© : comma_morphism ‚ü®_, _, _‚ü© ‚ü®_, _, _‚ü©),
      dsimp at q,
      apply q,
      obviously,
    end },
  inv_fun := Œª f,
  { app := Œª j,
    begin
      apply colimit.desc _ ‚ü®_, _‚ü©,
      apply whisker_left _ f ‚â´ _,
      refine ‚ü®_, _‚ü©,
      intro X,
      apply G.map X.hom,
      intros X Y g,
      dsimp,
      rw ‚Üê G.map_comp,
      rw g.w,
      rw comp_id,
      dsimp,
      rw comp_id,
    end,
    naturality' := Œª j‚ÇÅ j‚ÇÇ Œ±,
    begin
      dsimp,
      rw colimit.pre_desc,
      ext k,
      rw colimit.Œπ_desc,
      erw colimit.Œπ_desc_assoc,
      dsimp,
      simp,
    end },
  left_inv := Œª f,
  begin
    ext,
    dsimp,
    rw colimit.Œπ_desc,
    dsimp,
    rw [assoc],
    rw ‚Üê f.naturality j.hom,
    rw ‚Üê assoc,
    congr' 1,
    dsimp,
    change colimit.Œπ (comma.map_right p ((functor.const (discrete punit)).map j.hom) ‚ãô comma.fst p (functor.from_punit x) ‚ãô F) _ ‚â´ _ = _,
    rw colimit.Œπ_pre,
    congr' 1,
    cases j,
    dsimp [comma.map_right],
    simp,
  end,
  right_inv := Œª f,
  begin
    ext,
    dsimp,
    rw colimit.Œπ_desc,
    dsimp,
    simp,
  end }

def left_kan [has_colimits D] (p : C ‚•§ C') : (C ‚•§ D) ‚•§ (C' ‚•§ D) :=
begin
  refine adjunction.left_adjoint_of_equiv (left_kan_equiv p) _,
  intros F G G' f g,
  ext,
  dsimp [left_kan_equiv],
  rw [assoc],
end

def left_kan_adjunction [has_colimits D] (p : C ‚•§ C') :
  left_kan p ‚ä£ (whiskering_left _ _ D).obj p :=
adjunction.adjunction_of_equiv_left _ _

def comma.terminal (p : C ‚•§ C') (X : _) : comma p (functor.from_punit (p.obj X)) :=
‚ü®_, punit.star, ùüô _‚ü©

/--
Show that `elements.initial A` is initial in the category of elements for the `yoneda` functor.
-/
def is_terminal (p : C ‚•§ C') (X : C) [full p] [faithful p] : is_terminal (comma.terminal p X) :=
{ lift := Œª s,
  begin
    refine ‚ü®p.preimage s.X.hom, eq_to_hom (by simp), _‚ü©,
    dsimp,
    dsimp [comma.terminal],
    simp,
  end,
  uniq' := Œª s m w,
  begin
    have := m.w,
    ext,
    dsimp,
    apply p.map_injective,
    dsimp [comma.terminal] at this,
    simp,
    rw comp_id at this,
    rw this,
    simp,
  end }

def reflective [has_colimits D] (p : C ‚•§ C') (A : C ‚•§ D) :
  p ‚ãô (left_kan p).obj A ‚âÖ A :=
begin
  refine nat_iso.of_components _ _,
  intro X,
  dsimp [left_kan, adjunction.left_adjoint_of_equiv],

end

end category_theory
