/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.limits.preserves.basic
import category_theory.filtered
import category_theory.limits.types

/-!
# Preservation of filtered colimits.

Typically forgetful functors from algebraic categories preserve filtered colimits
(although not general colimits).
-/

open category_theory

namespace category_theory.limits

universes v u‚ÇÅ u‚ÇÇ -- declare the `v`'s first; see `category_theory.category` for an explanation

variables {C : Type u‚ÇÅ} [category.{v} C]
variables {D : Type u‚ÇÇ} [category.{v} D]

variables {J : Type v} [small_category J] {K : J ‚•§ C}

class preserves_filtered_colimits (F : C ‚•§ D) : Type (max u‚ÇÅ u‚ÇÇ (v+1)) :=
(preserves_filtered_colimits : Œ† (J : Type v) [small_category J] [is_filtered J],
  preserves_colimits_of_shape J F)

attribute [instance, priority 100] preserves_filtered_colimits.preserves_filtered_colimits

namespace types

noncomputable
instance star_preserves_filtered_colimits : preserves_filtered_colimits types.star.{v} :=
{ preserves_filtered_colimits := Œª J ùí• ‚Ñ±, by exactI
  { preserves_colimit := Œª K,
    preserves_colimit_of_is_iso (types.colimit_cocone_is_colimit _) (types.colimit_cocone_is_colimit _)
    begin
      apply (is_iso_equiv_bijective _).inv_fun,
      split,
      { -- injectivity
        rintros ‚ü®jx, ‚ü®x‚ÇÅ,x‚ÇÇ‚ü©‚ü© ‚ü®jy, ‚ü®y‚ÇÅ,y‚ÇÇ‚ü©‚ü© ‚ü®‚ü©,
        exact quot.sound ‚ü®is_filtered.sup jx jy,
          is_filtered.left_to_sup _ _, is_filtered.right_to_sup _ _, by ext‚ü©, },
      { -- surjectivity
        rintro ‚ü®‚ü©,
        exact ‚ü®quot.mk _ ‚ü®is_filtered.nonempty.some, punit.star‚ü©, by ext‚ü©, },
    end } }

@[simps]
def prod (F G : C ‚•§ Type v) : C ‚•§ Type v :=
{ obj := Œª X, F.obj X √ó G.obj X,
  map := Œª X Y f p, (F.map f p.1, G.map f p.2) }

noncomputable
instance blah [has_colimits C] (F G : C ‚•§ Type v)
  [preserves_filtered_colimits F] [preserves_filtered_colimits G] :
  preserves_filtered_colimits (prod F G) :=
{ preserves_filtered_colimits := Œª J ùí• ‚Ñ±, by exactI
  { preserves_colimit := Œª K,
    preserves_colimit_of_is_iso (colimit.is_colimit _) (types.colimit_cocone_is_colimit _)
    begin
      apply (is_iso_equiv_bijective _).inv_fun,
      split,
      { -- injectivity
        rintros ‚ü®jx, ‚ü®x‚ÇÅ,x‚ÇÇ‚ü©‚ü© ‚ü®jy, ‚ü®y‚ÇÅ,y‚ÇÇ‚ü©‚ü© h,
        injection h with h‚ÇÅ h‚ÇÇ, clear h,
        dsimp at h‚ÇÅ h‚ÇÇ,
        change (F.map_cocone (colimit.cocone K)).Œπ.app jx x‚ÇÅ =
          ((F.map_cocone (colimit.cocone K)).Œπ.app jy y‚ÇÅ : _) at h‚ÇÅ,
        change (G.map_cocone (colimit.cocone K)).Œπ.app jx x‚ÇÇ =
          ((G.map_cocone (colimit.cocone K)).Œπ.app jy y‚ÇÇ : _) at h‚ÇÇ,
        rw types.filtered_colimit.is_colimit_eq_iff _ (preserves_colimit.preserves (colimit.is_colimit K)) at h‚ÇÅ,
        swap, apply_instance,
        rw types.filtered_colimit.is_colimit_eq_iff _ (preserves_colimit.preserves (colimit.is_colimit K)) at h‚ÇÇ,
        swap, apply_instance,
        rcases h‚ÇÅ with ‚ü®j‚ÇÅ, ix‚ÇÅ, iy‚ÇÅ, e‚ÇÅ‚ü©,
        rcases h‚ÇÇ with ‚ü®j‚ÇÇ, ix‚ÇÇ, iy‚ÇÇ, e‚ÇÇ‚ü©,
        obtain ‚ü®j, i‚ÇÅ, i‚ÇÇ, h‚ÇÅ, h‚ÇÇ‚ü© := is_filtered.bowtie ix‚ÇÅ ix‚ÇÇ iy‚ÇÅ iy‚ÇÇ,
        refine quot.sound ‚ü®j, ix‚ÇÅ ‚â´ i‚ÇÅ, iy‚ÇÇ ‚â´ i‚ÇÇ, _‚ü©,
        ext; dsimp,
        { erw [K.map_comp, F.map_comp, types_comp_apply, e‚ÇÅ,
            ‚Üêh‚ÇÇ, K.map_comp, F.map_comp, types_comp_apply],
          refl, },
        { erw [h‚ÇÅ, K.map_comp, G.map_comp, types_comp_apply,
            K.map_comp, G.map_comp, types_comp_apply, ‚Üêe‚ÇÇ],
          refl, }, },
      { -- surjectivity
        rintro ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©,
        change (F.map_cocone _).X at x‚ÇÅ,
        change (G.map_cocone _).X at x‚ÇÇ,
        let e‚ÇÅ := preserves_colimit_iso (colimit.is_colimit K) (types.colimit_cocone_is_colimit (K ‚ãô F)),
        let e‚ÇÇ := preserves_colimit_iso (colimit.is_colimit K) (types.colimit_cocone_is_colimit (K ‚ãô G)),
        rcases h‚ÇÅ : e‚ÇÅ.hom x‚ÇÅ with ‚ü®j‚ÇÅ, y‚ÇÅ‚ü©,
        rcases h‚ÇÇ : e‚ÇÇ.hom x‚ÇÇ with ‚ü®j‚ÇÇ, y‚ÇÇ‚ü©,
        fsplit,
        { exact quot.mk _ ‚ü®(is_filtered.sup j‚ÇÅ j‚ÇÇ),
            ‚ü®(K ‚ãô F).map (is_filtered.left_to_sup j‚ÇÅ j‚ÇÇ) y‚ÇÅ,
             (K ‚ãô G).map (is_filtered.right_to_sup j‚ÇÅ j‚ÇÇ) y‚ÇÇ‚ü©‚ü©, },
        { simp only [functor.map_cocone_Œπ, functor.comp_map, prod.mk.inj_iff, prod_map,
            limits.types.colimit_cocone_is_colimit_desc, limits.colimit.cocone_Œπ],
          fsplit,
          { apply e‚ÇÅ.to_equiv.injective, simp [h‚ÇÅ, e‚ÇÅ],
            erw map_Œπ_comp_preserves_colimit_iso_hom_apply,
            exact quot.sound ‚ü®_, ùüô _, is_filtered.left_to_sup _ _, by simp‚ü©, },
          { apply e‚ÇÇ.to_equiv.injective, simp [h‚ÇÇ, e‚ÇÇ],
            erw map_Œπ_comp_preserves_colimit_iso_hom_apply,
            exact quot.sound ‚ü®_, ùüô _, is_filtered.right_to_sup _ _, by simp‚ü©, }, }, }
    end } }

noncomputable
instance diagonal_preserves_filtered_colimits : preserves_filtered_colimits types.diagonal.{v} :=
{ preserves_filtered_colimits := Œª J ùí• ‚Ñ±, by exactI
  { preserves_colimit := Œª K,
    preserves_colimit_of_is_iso (types.colimit_cocone_is_colimit _) (types.colimit_cocone_is_colimit _)
    begin
      apply (is_iso_equiv_bijective _).inv_fun,
      split,
      { -- injectivity
        rintros ‚ü®jx, ‚ü®x‚ÇÅ,x‚ÇÇ‚ü©‚ü© ‚ü®jy, ‚ü®y‚ÇÅ,y‚ÇÇ‚ü©‚ü© h,
        injection h with h‚ÇÅ h‚ÇÇ, clear h,
        rw types.filtered_colimit.is_colimit_eq_iff K (types.colimit_cocone_is_colimit _) at h‚ÇÅ h‚ÇÇ,
        rcases h‚ÇÅ with ‚ü®j‚ÇÅ, ix‚ÇÅ, iy‚ÇÅ, e‚ÇÅ‚ü©,
        rcases h‚ÇÇ with ‚ü®j‚ÇÇ, ix‚ÇÇ, iy‚ÇÇ, e‚ÇÇ‚ü©,
        obtain ‚ü®j, i‚ÇÅ, i‚ÇÇ, h‚ÇÅ, h‚ÇÇ‚ü© := is_filtered.bowtie ix‚ÇÅ ix‚ÇÇ iy‚ÇÅ iy‚ÇÇ,
        refine quot.sound ‚ü®j, ix‚ÇÅ ‚â´ i‚ÇÅ, iy‚ÇÇ ‚â´ i‚ÇÇ, _‚ü©,
        ext; dsimp,
        { rw [K.map_comp, types_comp_apply, e‚ÇÅ, ‚Üêh‚ÇÇ, K.map_comp, types_comp_apply], },
        { rw [h‚ÇÅ, K.map_comp, types_comp_apply, K.map_comp, types_comp_apply, ‚Üêe‚ÇÇ], }, },
      { -- surjectivity
        rintro ‚ü®‚ü®j‚ÇÅ, x‚ÇÅ‚ü©, ‚ü®j‚ÇÇ, x‚ÇÇ‚ü©‚ü©,
        fsplit,
        { exact quot.mk _ ‚ü®(is_filtered.sup j‚ÇÅ j‚ÇÇ),
            ‚ü®K.map (is_filtered.left_to_sup j‚ÇÅ j‚ÇÇ) x‚ÇÅ,
             K.map (is_filtered.right_to_sup j‚ÇÅ j‚ÇÇ) x‚ÇÇ‚ü©‚ü©, },
        { simp only [functor.map_cocone_Œπ, limits.types.colimit_cocone_is_colimit_desc,
            limits.types.colimit_cocone_Œπ_app, id.def, prod.mk.inj_iff, types.diagonal_map],
          fsplit,
          { exact quot.sound ‚ü®_, ùüô _, is_filtered.left_to_sup _ _, by simp‚ü©, },
          { exact quot.sound ‚ü®_, ùüô _, is_filtered.right_to_sup _ _, by simp‚ü©, }, }, },
    end } }

noncomputable
instance triple_diagonal_preserves_filtered_colimits :
  preserves_filtered_colimits types.triple_diagonal.{v} := sorry

end types

end category_theory.limits
