/-
-- Copyright (c) 2019 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison
-/
import category_theory.concrete_category.concrete_monoidal_category

section
universes u

-- @[simp]
-- lemma eq_mpr_mp {Œ± Œ±' : Sort u} (h : Œ± = Œ±') (a : Œ±) :
--   eq.mpr h (eq.mp h a) = a :=
-- by { cases h, refl }

-- @[simp]
-- lemma eq_mp_mpr {Œ± Œ±' : Sort u} (h : Œ± = Œ±') (a : Œ±') :
--   eq.mp h (eq.mpr h a) = a :=
-- by { cases h, refl }

end

universes v u

open category_theory

namespace category_theory

class decorated_category (V : Type (v+1)) [large_category V] [concrete_category V] :=
(obj_data : Type v ‚Üí Type (v+1))
(obj_equiv [] : V ‚âÉ Œ£ Œ±, obj_data Œ±)
(hom_data : Œ† {X Y : Type v} (f : X ‚Üí Y) (X' : obj_data X) (Y' : obj_data Y), Type v)
(hom_equiv : Œ† (p q : Œ£ Œ±, obj_data Œ±), (obj_equiv.symm p ‚ü∂ obj_equiv.symm q) ‚âÉ Œ£ (f : p.1 ‚Üí q.1), hom_data f p.2 q.2)
(forget_obj_eq : Œ† (p : Œ£ Œ±, obj_data Œ±), (forget V).obj (obj_equiv.symm p) = p.1 . obviously)
(forget_map_eq : Œ† {p q : Œ£ Œ±, obj_data Œ±} (f : p.1 ‚Üí q.1) (d : hom_data f p.2 q.2),
  (forget V).map ((hom_equiv p q).symm ‚ü®f, d‚ü©) ‚â´ eq_to_hom (forget_obj_eq q) = eq_to_hom (forget_obj_eq p) ‚â´ f . obviously)

-- TODO state as lemmas:
-- (hom_equiv : Œ† v w : V, (v ‚ü∂ w) ‚âÉ Œ£ (f : (obj_equiv v).1 ‚Üí (obj_equiv w).1), hom_data f (obj_equiv v).2 (obj_equiv w).2)
-- (forget_obj_eq : Œ† v : V, (forget V).obj v = (obj_equiv v).1 . obviously)
-- (forget_map_eq : Œ† {v w : V} (f : v ‚ü∂ w), (forget V).map f ‚â´ (eq_to_hom (forget_obj_eq w)) = (eq_to_hom (forget_obj_eq v)) ‚â´ ((hom_equiv v w) f).1 . obviously)

open decorated_category

-- Make this low priority, as there may be better ones for bundled categories and induced categories.
@[priority 10]
instance (V : Type (v+1)) [large_category V] [concrete_category V] : decorated_category V :=
{ obj_data := Œª X, { v : V // (forget V).obj v = X },
  obj_equiv :=
  { to_fun := Œª v, ‚ü®(forget V).obj v, ‚ü®v, rfl‚ü©‚ü©,
    inv_fun := Œª p, p.2.1,
    left_inv := by tidy,
    right_inv := by tidy, },
  hom_data := Œª X Y f X' Y', { f' : X'.1 ‚ü∂ Y'.1 // eq_to_hom (X'.2.symm) ‚â´ (forget V).map f' ‚â´ eq_to_hom (Y'.2) = f },
  hom_equiv := Œª p q,
  { to_fun := Œª f, ‚ü®_, ‚ü®f, rfl‚ü©‚ü©,
    inv_fun := Œª t, t.2.1,
    left_inv := by tidy,
    right_inv := by tidy, } }

variables (V : Type (v+1)) [large_category V] [concrete_category V]
variables (C : Type u) [ùíû : category.{v} C]
include  ùíû

open decorated_category

class enriched_over :=
(e_hom  [] : Œ† (X Y : C), obj_data V (X ‚ü∂ Y))
(notation X ` ‚ü∂[V] ` Y:10 := (@obj_equiv V _ _).inv_fun ‚ü®X ‚ü∂ Y, e_hom X Y‚ü©)
(e_comp_left : Œ† {X Y : C} (f : X ‚ü∂ Y) (Z : C), hom_data (Œª g : Y ‚ü∂ Z, f ‚â´ g) (e_hom Y Z) (e_hom X Z))
(e_comp_right : Œ† (X : C) {Y Z : C} (g : Y ‚ü∂ Z), hom_data (Œª f : X ‚ü∂ Y, f ‚â´ g) (e_hom X Y) (e_hom X Z))

variable [enriched_over V C]

notation X ` ‚ü∂[`V`] ` Y:10 := (obj_equiv V).inv_fun ‚ü®X ‚ü∂ Y, enriched_over.e_hom V X Y‚ü©
example [enriched_over V C] (X Y : C) : V := X ‚ü∂[V] Y

variables {C}

def comp_left {X Y : C} (f : X ‚ü∂ Y) (Z : C) : (Y ‚ü∂[V] Z) ‚ü∂ (X ‚ü∂[V] Z) :=
(hom_equiv _ _).inv_fun ‚ü®Œª g : Y ‚ü∂ Z, f ‚â´ g, enriched_over.e_comp_left f Z‚ü©

def comp_right (X : C) {Y Z : C} (g : Y ‚ü∂ Z) : (X ‚ü∂[V] Y) ‚ü∂ (X ‚ü∂[V] Z) :=
(hom_equiv _ _).inv_fun ‚ü®Œª f : X ‚ü∂ Y, f ‚â´ g, enriched_over.e_comp_right X g‚ü©

omit ùíû

/-- We check that we can construct the trivial enrichment of `Type` in `Type`. -/
instance : enriched_over (Type u) (Type u) :=
{ e_hom := Œª X Y, ‚ü®X ‚ü∂ Y, rfl‚ü©,
  e_comp_left := Œª X Y f Z, ‚ü®(Œª (g : Y ‚ü∂ Z), f ‚â´ g), rfl‚ü©,
  e_comp_right := Œª X Y Z g, ‚ü®(Œª (f : X ‚ü∂ Y), f ‚â´ g), rfl‚ü©, }

-- We check that this instance has good definitional properties:
example : comp_left Type (‚Üæ(Œª n : ‚Ñï, 2 * n)) ‚Ñï = (Œª f n, f (2 * n)) := rfl

end category_theory
