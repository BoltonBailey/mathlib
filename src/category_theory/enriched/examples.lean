/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.enriched.enriched_over
import algebra.category.Module.monoidal

universes v u

open category_theory

namespace Module

-- PROJECT
-- These next two lemmas are true in any concrete category whose forgetful functor creates limits.
-- Perhaps when we do algebraic theories this should be generalised.
@[simp]
lemma fst_tensor_hom_apply {Œ± Œ≤ Œ≥ Œ¥ : Type u} (f : Œ± ‚ü∂ Œ≤) (g : Œ≥ ‚ü∂ Œ¥) (x : Œ± ‚äó Œ≥) :
  (limits.prod.fst : Œ≤ ‚äó Œ¥ ‚ü∂ Œ≤) (((f ‚äó g) : Œ± ‚äó Œ≥ ‚ü∂ Œ≤ ‚äó Œ¥) x) = (f ((limits.prod.fst : Œ± ‚äó Œ≥ ‚ü∂ Œ±) x)) :=
rfl
@[simp]
lemma snd_tensor_hom_apply {Œ± Œ≤ Œ≥ Œ¥ : Type u} (f : Œ± ‚ü∂ Œ≤) (g : Œ≥ ‚ü∂ Œ¥) (x : Œ± ‚äó Œ≥) :
  (limits.prod.snd : Œ≤ ‚äó Œ¥ ‚ü∂ Œ¥) (((f ‚äó g) : Œ± ‚äó Œ≥ ‚ü∂ Œ≤ ‚äó Œ¥) x) = (g ((limits.prod.snd : Œ± ‚äó Œ≥ ‚ü∂ Œ≥) x)) :=
rfl

local notation G`‚ô≠`:100 := ((forget (Module ‚Ñ§)).obj G)

instance : concrete_monoidal_category (Module ‚Ñ§) :=
{ lax_monoidal :=
  { Œµ := Œª x, (1 : ‚Ñ§),
    Œº := Œª G H p,
    ((limits.prod.fst : G‚ô≠ ‚®Ø H‚ô≠ ‚ü∂ G‚ô≠) p) ‚äó‚Çú ((limits.prod.snd : G‚ô≠ ‚®Ø H‚ô≠ ‚ü∂ H‚ô≠) p),
    Œº_natural' := Œª X Y X' Y' f g, rfl,
    associativity' := Œª X Y Z, rfl,
    left_unitality' := Œª X,
    begin
      ext, dsimp,
      erw Module.monoidal_category.left_unitor_hom,
      simp [one_smul],
    end,
    right_unitality' := Œª X,
    begin
      ext, dsimp,
      erw Module.monoidal_category.right_unitor_hom,
      simp [one_smul],
    end, }}.

section
variables (C : Type 1) [ùíû : large_category C]
include ùíû

instance [enriched_over (Module ‚Ñ§) C] (X Y : C) : add_comm_group (X ‚ü∂ Y) :=
begin
  have : add_comm_group ((X ‚ü∂[Module ‚Ñ§] Y) : Module ‚Ñ§),
  apply_instance,
  convert this,
end

instance [enriched_over (Module ‚Ñ§) C] (X Y : C) : module ‚Ñ§ (X ‚ü∂ Y) :=
begin
  change module ‚Ñ§ (X ‚ü∂[Module ‚Ñ§] Y),
  apply_instance,
end

-- How do we want to express the linearity of morphisms?
end

@[simp]
lemma as_term_eq {M : Module ‚Ñ§} (f : ùüô_ (Module ‚Ñ§) ‚ü∂ M) : as_term f = f (1 : ‚Ñ§) := rfl

@[simp]
lemma forget.Œº_eq {M N : Module ‚Ñ§} (m : (forget (Module ‚Ñ§)).obj M) (n : (forget (Module ‚Ñ§)).obj N) :
  forget.Œº m n = m ‚äó‚Çú n :=
rfl

-- TODO this would be easier if we noticed that the forgetful functor is representable
def enriched_id (X : Module ‚Ñ§) : ùüô_ (Module ‚Ñ§) ‚ü∂ of ‚Ñ§ (X ‚ü∂ X) :=
begin
  fsplit,
  intro i,
  fsplit,
  intro x, exact i ‚Ä¢ x,
  { exact smul_add i, },
  { exact smul_comm i, },
  { intros i j, ext, dsimp, exact add_smul i j x, },
  { intros i y, ext, dsimp, exact mul_smul i y x, }
end

@[simp]
lemma enriched_id_apply {X : Module ‚Ñ§} (i : ‚Ñ§) (x : X) : ((enriched_id X) i).to_fun x = i ‚Ä¢ x :=
rfl

def enriched_comp (X Y Z : Module ‚Ñ§) :
  of ‚Ñ§ (X ‚ü∂ Y) ‚äó of ‚Ñ§ (Y ‚ü∂ Z) ‚ü∂ of ‚Ñ§ (X ‚ü∂ Z) :=
begin
  -- We build an R-linear map out of the tensor product, using the universal property,
  apply tensor_product.lift,
  -- requiring us to build an R-linear map from `X ‚ü∂ Y` to the R-linear maps `Y ‚ü∂ Z` to `X ‚ü∂ Z`.
  fsplit,
  { intro f,
    fsplit,
    { intro g,
      -- The underlying function is just composition of morphisms.
      exact f ‚â´ g, },
    -- And now we just follow our noses,
    -- looking up the names of lemmas about R-modules and R-linear maps using `library_search`!
    { intros g‚ÇÅ g‚ÇÇ, ext, refl, },
    { intros i g, ext, refl, }, },
  { intros f‚ÇÅ f‚ÇÇ, ext g x, dsimp, exact g.add (f‚ÇÅ.to_fun x) (f‚ÇÇ.to_fun x), },
  { intros i f, ext g x, dsimp, exact g.smul i (f.to_fun x), },
end.

@[simp]
lemma enriched_comp_apply_pure {M N K : Module ‚Ñ§} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
  (enriched_comp M N K) (f ‚äó‚Çú g) = f ‚â´ g :=
begin
  dsimp [enriched_comp],
  simp,
  refl,
end

instance : enriched_over (Module ‚Ñ§) (Module ‚Ñ§) :=
{ e_hom := Œª X Y, Module.of ‚Ñ§ (X ‚ü∂ Y),
  e_id := Œª X, enriched_id X,
  e_comp := Œª X Y Z, enriched_comp X Y Z,
  e_hom_forget := Œª X Y, equiv.refl (X ‚ü∂ Y),
  e_id_forget' := Œª X,
  begin
    ext x, dsimp,
    -- FIXME this is farcical. We should just be able to call simp, and have `enriched_id_apply` work.
    have := enriched_id_apply 1 x,
    conv at this { to_rhs, simp, },
    conv { to_rhs, rw ‚Üêthis, },
    refl,
  end,
  e_comp_forget' := Œª M N K f g,
  begin
    ext m, dsimp,
    -- FIXME why can't we call `simp`?
    rw [enriched_comp_apply_pure f g],
    refl,
  end, }

-- TODO modules over a ring are enriched over themselves
-- TODO deduce from this that they are enriched over AddCommGroup

end Module
