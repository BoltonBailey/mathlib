/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.limits.shapes.zero
import category_theory.limits.shapes.kernels
import category_theory.limits.shapes.constructions.products
import category_theory.limits.shapes.constructions.binary_products
import category_theory.abelian.basic
import category_theory.abelian.additive
import category_theory.simple
import category_theory.schur
import category_theory.isomorphism_classes
import data.fintype.card
import data.pequiv

open category_theory.limits

namespace category_theory

universes v u w
variables {C : Type u} [category.{v} C]

section
variables (C)
variables [has_zero_morphisms.{v} C]

/-- `is_isomorphic` defines a setoid on the simple objects. -/
def simple_is_isomorphic_setoid : setoid (Œ£ (X : C), simple X) :=
{ r := Œª X Y, is_isomorphic X.1 Y.1,
  iseqv := ‚ü®Œª X, ‚ü®iso.refl X.1‚ü©, Œª X Y ‚ü®Œ±‚ü©, ‚ü®Œ±.symm‚ü©, Œª X Y Z ‚ü®Œ±‚ü© ‚ü®Œ≤‚ü©, ‚ü®Œ±.trans Œ≤‚ü©‚ü© }

/-- The isomorphism classes of simples in a category. -/
def iso_classes_of_simples : Type (max u v) := quotient (simple_is_isomorphic_setoid C)

local attribute [instance] simple_is_isomorphic_setoid


/-- An arbitrarily chosen representative of each isomorphism class of simple object. -/
noncomputable def simples : iso_classes_of_simples C ‚Üí C :=
Œª X, (quotient.out X).1

lemma simples_non_isomorphic (i j) (h : i ‚â† j) (f : simples C i ‚âÖ simples C j) : false :=
begin
  -- FIXME golf!
  apply h, clear h,
  induction i, induction j,
  simp [simples] at f,
  apply quotient.sound,
  transitivity,
  exact setoid.symm (quotient.mk_out _),
  transitivity,
  split,
  exact f,
  exact quotient.mk_out _,
  refl,
  refl,
end

variables {C}

/-- The isomorphism class of a simple object. -/
def simple.iso_class (X : C) [simple X] : iso_classes_of_simples C :=
quotient.mk ‚ü®X, by apply_instance‚ü©

/-- Every simple object is isomorphic to the chosen representative from its isomorphism class. -/
noncomputable def simple.iso_to_representative (X : C) [simple X] :
  X ‚âÖ simples C (simple.iso_class X) :=
classical.choice (setoid.symm (quotient.mk_out (‚ü®X, by apply_instance‚ü© : Œ£ (X : C), simple X)))

noncomputable instance simples_simple (X : iso_classes_of_simples C) : simple (simples C X) :=
(quotient.out X).2

/--
We say a family of objects `Z : Œπ ‚Üí C` in a category with zero morphisms is
"mutually simple" if
* for distinct `i j`, every morphism `Z i ‚ü∂ Z j` is zero,
* a morphism `f : Z i ‚ü∂ Z i` is an isomorphism iff it is not zero.

As an example, in a preadditive category with kernels,
any collection of non-isomorphic simple objects is mutually simple (by Schur's lemma).

We abstract out this notion because
1. it's useful to state the definition of M√ºger semisimplicity
   (which is often used to show that diagrammatic categories are semisimple), and
2. it's the key property needed to diagonalize morphisms between semisimple objects (see below).
-/
structure mutually_simple {Œπ : Type w} (Z : Œπ ‚Üí C) :=
(eq_zero : ‚àÄ {i j} (h : i ‚â† j) (f : Z i ‚ü∂ Z j), f = 0)
(simple : Œ† i (f : Z i ‚ü∂ Z i), is_iso f ‚âÉ (f ‚â† 0))

end

section
variables [preadditive.{v} C] [has_kernels.{v} C]

/--
In a preadditive category with kernels,
any family of non-isomorphic simple objects is "mutually simple".
-/
def simples_mutually_simple' {Œπ : Type w} (Z : Œπ ‚Üí C)
  [Œ† i, simple (Z i)] [Œ† i j, decidable_eq (Z i ‚ü∂ Z j)]
  (w : ‚àÄ (i j) (h : i ‚â† j), (Z i ‚âÖ Z j) ‚Üí false) :
  mutually_simple Z :=
{ eq_zero := Œª i j h f,
  begin
    by_contradiction,
    haveI := is_iso_of_hom_simple a,
    exact w _ _ h (as_iso f),
  end,
  simple := Œª i f, is_iso_equiv_nonzero }

/--
In a preadditive category with kernels,
an arbitrarily chosen representative of each isomorphism class of simples
provides a "mutually simple" family.
-/
noncomputable def simples_mutually_simple [Œ† i j, decidable_eq (simples C i ‚ü∂ simples C j)] :
  mutually_simple.{v} (simples C) :=
simples_mutually_simple' (simples C) (simples_non_isomorphic C)

end

section
variables [has_zero_morphisms.{v} C] [has_finite_biproducts.{v} C]

structure decomposition_over {Œπ : Type w} (Z : Œπ ‚Üí C) (X : C) :=
(Œ∫ : Type v)
[fintype : fintype Œ∫]
[decidable_eq : decidable_eq Œ∫]
(summand : Œ∫ ‚Üí Œπ)
(iso : X ‚âÖ ‚®Å (Œª k, Z (summand k)))

attribute [instance] decomposition_over.fintype decomposition_over.decidable_eq

@[simps]
def decomposition_over.trivial {Œπ : Type w} {Z : Œπ ‚Üí C}
  {Œ∫ : Type v} [fintype Œ∫] [decidable_eq Œ∫] {summand : Œ∫ ‚Üí Œπ} :
  decomposition_over Z (‚®Å (Œª k, Z (summand k))) :=
{ Œ∫ := Œ∫,
  summand := summand,
  iso := iso.refl _ }

def decomposition_over.transport {Œπ : Type w} {Z : Œπ ‚Üí C} {X : C} (D : decomposition_over Z X)
  {Y : C} (i : X ‚âÖ Y) : decomposition_over Z Y :=
{ iso := i.symm ‚â™‚â´ D.iso,
  .. D }

section
variables [has_binary_biproducts.{v} C]

def decomposition_over.biprod_single {Œπ : Type w} {Z : Œπ ‚Üí C} {X : C} (D : decomposition_over Z X)
  (i : Œπ) : decomposition_over Z (Z i ‚äû X) :=
{ Œ∫ := punit.{v+1} ‚äï D.Œ∫,
  summand := sum.elim (Œª _, i) D.summand,
  iso := sorry }

end

structure simple_decomposition (X : C) :=
(Œπ : Type v)
[fintype : fintype Œπ]
[decidable_eq : decidable_eq Œπ]
(summand : Œπ ‚Üí C)
[is_simple : Œ† i, simple.{v} (summand i)]
(iso : X ‚âÖ ‚®Å summand)

attribute [instance] simple_decomposition.fintype simple_decomposition.decidable_eq
attribute [instance] simple_decomposition.is_simple

def simple_decomposition.multiplicity
  [decidable_rel (Œª X Y : C, nonempty (X ‚âÖ Y))]
  {X : C} (D : simple_decomposition.{v} X) (Y : C) [simple.{v} Y] : ‚Ñï :=
fintype.card { i // nonempty (D.summand i ‚âÖ Y) }

lemma simple_decomposition.zero_of_card_zero
  {X : C} (D : simple_decomposition.{v} X) (h : fintype.card D.Œπ = 0) :
  ùüô X = 0 :=
begin
  have e : D.Œπ ‚âÉ pempty.{v} := fintype.equiv_pempty h,
  have z : ùüô (‚®Å D.summand) = 0 := product_over_equiv_pempty_id_eq_zero e _,
  have t : ùüô X = D.iso.hom ‚â´ ùüô (‚®Å D.summand) ‚â´ D.iso.inv := by simp,
  simpa [z] using t,
end

lemma simple_decomposition.card_zero_of_zero
  {X : C} (h : ùüô X = 0) (D : simple_decomposition.{v} X) : fintype.card D.Œπ = 0 :=
begin
  by_contradiction,
  cases fintype.card_pos_iff.1 (nat.pos_of_ne_zero a) with i,
  have : ùüô (D.summand i) = biproduct.Œπ _ i ‚â´ D.iso.inv ‚â´ ùüô X ‚â´ D.iso.hom ‚â´ biproduct.œÄ _ i, simp,
  simp [h] at this,
  exact id_nonzero _ this,
end


end



def equiv_punit_sum_of_term' {Œ± : Type v} [decidable_eq Œ±] [fintype Œ±] (a : Œ±) :
  Œ± ‚âÉ punit.{v+1} ‚äï {a' // a' ‚â† a} :=
{ to_fun := Œª a', if h : a' = a then sum.inl punit.star else sum.inr ‚ü®a', h‚ü©,
  inv_fun := Œª p, match p with | sum.inl _ := a | sum.inr v := v.1 end,
  left_inv := Œª a',
  begin
    dsimp, split_ifs,
    { subst h, unfold_aux, simp, },
    { unfold_aux, simp, }
  end,
  right_inv := Œª p,
  begin
    rcases p with ‚ü®‚ü®p‚ü©‚ü©|‚ü®a',ne‚ü©,
    { unfold_aux, simp, },
    { unfold_aux, simp [ne], },
  end, }

lemma fintype.card_ne {Œ± : Type v} [fintype Œ±] [decidable_eq Œ±] (a : Œ±) :
  fintype.card {a' // a' ‚â† a} = fintype.card Œ± - 1 :=
begin
  have t := fintype.card_congr (equiv_punit_sum_of_term' a),
  simp only [fintype.card_punit, ne.def, fintype.card_sum] at t,
  exact (nat.sub_eq_of_eq_add t).symm,
end

def equiv_punit_sum_of_term {Œ± : Type v} [decidable_eq Œ±] [fintype Œ±] (a : Œ±) :
  Œ£' (Œ≤ : Type v) [decidable_eq Œ≤] [fintype Œ≤] (e : Œ± ‚âÉ punit.{v+1} ‚äï Œ≤),
     e.symm (sum.inl punit.star) = a ‚àß (by exactI fintype.card Œ≤ = fintype.card Œ± - 1) :=
‚ü®{a' // a' ‚â† a},
by apply_instance,
by apply_instance,
equiv_punit_sum_of_term' a,
rfl,
fintype.card_ne a‚ü©



section

variables [preadditive.{v} C] [has_finite_biproducts.{v} C] -- TODO these should add up to `additive`?
variables [has_binary_biproducts.{v} C] -- only needed inside the proof of diagonalization
variables [has_kernels.{v} C] -- We need this for Schur's lemma.
variables [‚àÄ X Y : C, decidable_eq (X ‚ü∂ Y)]

variables {Œπ : Type w} (Z : Œπ ‚Üí C) (ms : mutually_simple Z)

/--
Given two objects which can be written as a sum of objects from a mutually simple family
(i.e. there are some isomorphisms `X ‚âÖ ‚®Å D`, `Y ‚âÖ ‚®Å E`),
and a morphism `f : X ‚ü∂ Y`,
we say a "diagonalization" of `f` consists of
* a new choice of isomorphisms `d : X ‚âÖ ‚®Å D` and `e : Y ‚âÖ ‚®Å E`
* a partial equivalence between the summands of `X` and the summands of `Y`
* such that with respect to these direct sum decompositions `f` is diagonal
  with respect to that partial equivalence
-/
structure diagonalization
  {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y) :=
(d : X ‚âÖ ‚®Å (Œª k, Z (D.summand k)))
(e : Y ‚âÖ ‚®Å (Œª k, Z (E.summand k)))
(p : D.Œ∫ ‚âÉ. E.Œ∫)
(h : ‚àÄ (x : D.Œ∫) (y : E.Œ∫), y ‚àà p x ‚Üî biproduct.Œπ _ x ‚â´ d.inv ‚â´ f ‚â´ e.hom ‚â´ biproduct.œÄ _ y ‚â† 0)

def diagonalization_source_card_zero
  {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  (h : fintype.card D.Œ∫ = 0) : diagonalization Z D E f := sorry

def diagonalization_target_card_zero
  {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  (h : fintype.card E.Œ∫ = 0) : diagonalization Z D E f := sorry

def diagonalization_conjugate
  {X Y X' Y' : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  (Œî : diagonalization Z D E f) (iX : X ‚âÖ X') (iY : Y ‚âÖ Y') :
  diagonalization Z (D.transport iX) (E.transport iY) (iX.inv ‚â´ f ‚â´ iY.hom) := sorry

def diagonalization_conjugate'
  {X Y X' Y' : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  (iX : X ‚âÖ X') (iY : Y ‚âÖ Y')
  (Œî : diagonalization Z (D.transport iX) (E.transport iY) (iX.inv ‚â´ f ‚â´ iY.hom)) :
  diagonalization Z D E f := sorry

def diagonalization_foo
  {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  (Œî : diagonalization Z decomposition_over.trivial decomposition_over.trivial (D.iso.inv ‚â´ f ‚â´ E.iso.hom)) :
  diagonalization Z D E f :=
diagonalization_conjugate' Z D E f D.iso E.iso
begin
  convert Œî;
  { dsimp [decomposition_over.transport, decomposition_over.trivial],
    congr,
    simp, }
end

def diagonalization_biprod {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  (Œî : diagonalization Z D E f) (i : Œπ) (g : Z i ‚âÖ Z i) :
  diagonalization Z (D.biprod_single i) (E.biprod_single i) (biprod.map g.hom f) := sorry

def diagonalize'
  {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y)
  {n : ‚Ñï} (h : fintype.card D.Œ∫ = n) :
  trunc (diagonalization Z D E f) :=
begin
  induction n with n ih generalizing X Y,
  { apply trunc.mk,
    apply diagonalization_source_card_zero,
    exact h, },
  { apply trunc.map,
    apply diagonalization_foo,
    generalize : D.iso.inv ‚â´ f ‚â´ E.iso.hom = f', clear f,
    by_cases w : ‚àÄ (x : D.Œ∫) (y : E.Œ∫), biproduct.Œπ _ x ‚â´ f' ‚â´ biproduct.œÄ _ y = 0,
    { apply trunc.mk,
      refine ‚ü®iso.refl _, iso.refl _, ‚ä•, _‚ü©,
      intros x y, split,
      rintro ‚ü®‚ü©, intro h', exfalso, dsimp at h', simp at h', exact h' (w x y), },
    { -- Okay, we've found a nonzero entry!
      simp at w,
      replace w := trunc_sigma_of_exists w,
      trunc_cases w,
      rcases w with ‚ü®x, w‚ü©,
      replace w := trunc_sigma_of_exists w,
      trunc_cases w,
      rcases w with ‚ü®y, w‚ü©,
      -- now use conjugate?
      sorry,
    }, }
end


def diagonalize
  {X Y : C} (D : decomposition_over.{v} Z X) (E : decomposition_over Z Y) (f : X ‚ü∂ Y) :
  trunc (diagonalization Z D E f) :=
diagonalize' Z D E f rfl

#exit

/--
An auxiliary definition for `equiv_of_simple_decomposition`,
with a specified cardinality for `D.Œπ`, so that we can do an induction.
-/
def equiv_of_simple_decompositions' (n : ‚Ñï) {X : C}
  (D E : simple_decomposition.{v} X) (w : fintype.card D.Œπ = n) :
  trunc Œ£ e : D.Œπ ‚âÉ E.Œπ, Œ† i, E.summand (e i) ‚âÖ D.summand i :=
begin
  -- We proceed by induction on `n`.
  induction n with n ih generalizing X,
  { -- When the index set for `D` is empty, the index set for `E` must be empty as well.
    set e‚ÇÅ := fintype.equiv_pempty w,
    set e‚ÇÇ := fintype.equiv_pempty (E.card_zero_of_zero (D.zero_of_card_zero w)),
    apply trunc.mk,
    use e‚ÇÅ.trans (e‚ÇÇ.symm),
    intro i,
    cases e‚ÇÅ i, },

  -- Otherwise, we consist the matrix of morphisms in `‚®Å D.summand ‚âÖ ‚®Å E.summand`.
  set f : ‚®Å D.summand ‚âÖ ‚®Å E.summand := D.iso.symm.trans E.iso,

  -- It has at least one column, because the cardinality of `D.Œπ` is positive.
  have s : trunc D.Œπ := trunc_of_card_pos (by { rw w, exact nat.succ_pos n, }),
  trunc_cases s,

  -- Since the whole matrix is an isomorphism, that column must have a nonzero entry.
  -- We pick such a `t`, and record as `nz` the fact that this matrix entry is nonzero.
  have column_nonzero :=
    biproduct.column_nonzero_of_iso s (id_nonzero _) f.hom,
  trunc_cases column_nonzero,
  rcases column_nonzero with ‚ü®t, nz‚ü©,

  -- In fact, by Schur's lemma that matrix entry is an isomorphism.
  haveI := is_iso_of_hom_simple nz,

  -- Our next task is to produce
  -- `h‚ÇÅ : ‚®Å D.summand ‚âÖ (D.summand s) ‚äû (... the other summands ...)`
  -- `h‚ÇÇ : ‚®Å E.summand ‚âÖ (E.summand t) ‚äû (... the other summands ...)`

  obtain ‚ü®ŒπD, dD, fD, eD, hD, cD‚ü© := equiv_punit_sum_of_term s,
  obtain ‚ü®ŒπE, dE, fE, eE, hE, cE‚ü© := equiv_punit_sum_of_term t,
  resetI,
  -- We write `X'` for "the other summands" from `D`.
  set X' : C := ‚®Å (Œª i, D.summand (eD.symm (sum.inr i))),

  -- We only use these internally, so it doesn't matter if they're not your favorites!
  haveI := has_binary_biproducts_of_finite_biproducts C,

  set h‚ÇÅ : ‚®Å D.summand ‚âÖ (D.summand s) ‚äû (‚®Å (Œª i, D.summand (eD.symm (sum.inr i)))) :=
    (biproduct_iso_of_equiv_punit_sum D.summand eD).trans
      (biprod.map_iso (congr_eq_to_iso _ hD) (iso.refl _)),
  set h‚ÇÇ : ‚®Å E.summand ‚âÖ (E.summand t) ‚äû (‚®Å (Œª i, E.summand (eE.symm (sum.inr i)))) :=
    (biproduct_iso_of_equiv_punit_sum E.summand eE).trans
      (biprod.map_iso (congr_eq_to_iso _ hE) (iso.refl _)),

  -- Now the key step of the inductive argument:
  -- because `D.summand s ‚âÖ E.summand t`, we can produce an isomorphism between
  -- the other summands of `D` and the other summands of `E`.
  -- This uses a little argument based on Gaussian elimination.
  have h : ‚®Å (Œª i, D.summand (eD.symm (sum.inr i))) ‚âÖ ‚®Å (Œª i, E.summand (eE.symm (sum.inr i))),
  { set h' := ((h‚ÇÅ.symm.trans f).trans h‚ÇÇ),
    have t : biprod.inl ‚â´ h'.hom ‚â´ biprod.fst =
      biproduct.Œπ D.summand s ‚â´ f.hom ‚â´ biproduct.œÄ E.summand t,
    { simp only [h', h‚ÇÅ, h‚ÇÇ], simp, },
    haveI : is_iso (biprod.inl ‚â´ h'.hom ‚â´ biprod.fst) := by { rwa t, },
    exact biprod.iso_elim h', },

  -- With that in hand, we have two different decompositions of `X'`,
  -- and can use the inductive hypothesis.
  set D' : simple_decomposition X' :=
  { Œπ := ŒπD,
    summand := Œª i, D.summand (eD.symm (sum.inr i)),
    iso := iso.refl _, },
  set E' : simple_decomposition X' :=
  { Œπ := ŒπE,
    summand := Œª i, E.summand (eE.symm (sum.inr i)),
    iso := h, },
  have e‚ÇÇ := ih D' E' (by { rw w at cD, exact cD, }),
  trunc_cases e‚ÇÇ with e‚ÇÇ,
  rcases e‚ÇÇ with ‚ü®e‚ÇÇ, œÄ'‚ü©,

  -- Finally, we build the desired equivalence by sending `s` to `t`,
  -- and otherwise using the inductively constructed equivalence.
  set e := (eD.trans (equiv.sum_congr (equiv.refl _) e‚ÇÇ)).trans eE.symm,

  -- After that, it's just a matter of nailing down the correct behaviour
  -- of the chosen equivalence.
  have œÄ : Œ† (i : D.Œπ), E.summand (e i) ‚âÖ D.summand i,
  { intro i,
    by_cases i = s,
    { unfreezingI { subst h },
      simp only [e],
      have hD' : eD i = sum.inl punit.star, { rw ‚ÜêhD, simp, },
      simp [hD', hE],
      exact (as_iso (biproduct.Œπ D.summand i ‚â´ f.hom ‚â´ biproduct.œÄ E.summand t)).symm, },
    { have p : Œ£' i' : ŒπD, (eD.symm) (sum.inr i') = i,
      { rcases w : eD i with ‚ü®‚ü®‚ü©‚ü©|i',
        { rw ‚Üêw at hD, simp only [equiv.symm_apply_apply] at hD, exfalso, exact h hD, },
        { use i', rw ‚Üêw, simp, }, },
      obtain ‚ü®i', w‚ü© := p,
      calc E.summand (e i) ‚âÖ E'.summand (e‚ÇÇ i') : _
      ... ‚âÖ D'.summand i' : œÄ' i'
      ... ‚âÖ D.summand i : _,
      { dsimp [E', e], rw ‚Üêw, simp, },
      { dsimp [D'], rw w, }, }, },
  exact trunc.mk ‚ü®e, œÄ‚ü©,
end

/--
Given two decompositions of `X` into simple objects,
there is a bijection between the index sets,
such that the corresponding simple objects are isomorphic.
-/
def equiv_of_simple_decompositions {X : C} (D E : simple_decomposition.{v} X) :
  trunc Œ£ e : D.Œπ ‚âÉ E.Œπ, Œ† i, E.summand (e i) ‚âÖ D.summand i :=
equiv_of_simple_decompositions' (fintype.card D.Œπ) D E rfl

open_locale classical

lemma multiplicity_constant {X : C} (D E : simple_decomposition.{v} X) (Y : C) [simple.{v} Y] :
  D.multiplicity Y = E.multiplicity Y :=
begin
  obtain ‚ü®e, f‚ü© := equiv_of_simple_decompositions D E,
  dsimp [simple_decomposition.multiplicity],
  apply fintype.card_congr,
  refine equiv.subtype_congr e _,
  intro i,
  refine equiv.nonempty_iff_nonempty _,
  exact
  { to_fun := Œª e', (f i).trans e',
    inv_fun := Œª e', (f i).symm.trans e',
    left_inv := by { intro i, simp, },
    right_inv := by { intro i, simp, }, }
end

end

variables (C) [preadditive.{v} C] [has_finite_biproducts.{v} C]

/--
A category is semisimple if every object can be written as a direct sum of simple objects.
-/
class semisimple :=
(simple_decomposition : Œ† X : C, trunc (simple_decomposition.{v} X))

variables {C} [semisimple.{v} C] [has_kernels.{v} C]
variables [decidable_rel (Œª X Y : C, nonempty (X ‚âÖ Y))]
variables [‚àÄ X Y : C, decidable_eq (X ‚ü∂ Y)]

/--
`multiplicity Y X` returns the number of simple summands of `X` which are isomorphic to `Y`.
-/
def multiplicity (Y : C) [simple.{v} Y] (X : C) : ‚Ñï :=
begin
  have D := semisimple.simple_decomposition.{v} X,
  trunc_cases D,
  { exact D.multiplicity Y, },
  { convert multiplicity_constant a b Y, },
end

end category_theory
