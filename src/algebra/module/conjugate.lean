/-
Copyright (c) 2020 Fr├Еd├Еric Dupuis. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Fr├Еd├Еric Dupuis
-/

import algebra.module.basic
import ring_theory.ring_invo
import data.complex.is_R_or_C

/-!
# Conjugate semimodules

## Implementation notes

## References

* https://en.wikipedia.org/wiki/Complex_conjugate_vector_space

## Tags
-/

variables {R : Type*} [comm_semiring R]

/-- The conjugate of a semimodule `E` with respect to a ring involution `I`. -/
@[derive [add_comm_monoid], nolint unused_arguments]
def conjugate_semimodule (I : R РЅЃ+* Rрхњрхќ) (E : Type*) [add_comm_monoid E] := E

instance {I : R РЅЃ+* Rрхњрхќ} {E : Type*} [add_comm_monoid E] : inhabited (conjugate_semimodule I E) := РЪе0РЪЕ

/-- The `is_R_or_C` complex conjugate semimodule of `E` -/
abbreviation conj_semimodule (­ЮЋю : Type*) [is_R_or_C ­ЮЋю] (E : Type*) [add_comm_monoid E] :=
  conjugate_semimodule (is_R_or_C.conj_to_ring_equiv ­ЮЋю) E

namespace conjugate_semimodule

variables {E : Type*}  [add_comm_monoid E]

/-- The identity map to the conjugate space -/
@[nolint unused_arguments] def to_conj (I : R РЅЃ+* Rрхњрхќ) : E Рєњ conjugate_semimodule I E := id

/-- The identity map from the conjugate space -/
@[nolint unused_arguments] def from_conj (I : R РЅЃ+* Rрхњрхќ) : conjugate_semimodule I E Рєњ E := id

@[simp] lemma from_to_conj {I : R РЅЃ+* Rрхњрхќ} {x : conjugate_semimodule I E}: to_conj I (from_conj I x) = x := rfl
@[simp] lemma to_from_conj {I : R РЅЃ+* Rрхњрхќ} {x : E}: from_conj I (to_conj I x) = x := rfl

variables {I : R РЅЃ+* Rрхњрхќ}

instance [has_scalar R E] : has_scalar R (conjugate_semimodule I E) :=
{ smul := ╬╗ r x, to_conj I ((I r).unop Рђб (from_conj I x)) }

instance [mul_action R E] : mul_action R (conjugate_semimodule I E) :=
{ one_smul := ╬╗ x, by { change to_conj I ((I 1).unop Рђб (from_conj I x)) = x, simp },
  mul_smul := ╬╗ x y z,
  begin
    change to_conj I( (I (x * y)).unop Рђб (from_conj I z)) = to_conj I ((I x).unop Рђб (from_conj I ( to_conj I ((I y).unop Рђб (from_conj I z)) ))),
    simp [mul_comm, mul_smul],
  end }

instance [distrib_mul_action R E] : distrib_mul_action R (conjugate_semimodule I E) :=
{ smul_add := ╬╗ r x y,
  begin
    change to_conj I ((I r).unop Рђб (from_conj I (x + y)))
          = to_conj I ((I r).unop Рђб (from_conj I x)) + to_conj I ((I r).unop Рђб (from_conj I y)),
    simp [from_conj, to_conj, smul_add],
  end,
  smul_zero := ╬╗ r, by { change to_conj I ((I r).unop Рђб (from_conj I 0)) = 0, simp [to_conj, from_conj] } }

instance [semimodule R E] : semimodule R (conjugate_semimodule I E) :=
{ add_smul := ╬╗ r s x,
  begin
    change to_conj I ((I (r + s)).unop Рђб (from_conj I x))
      = to_conj I ((I r).unop Рђб (from_conj I x)) + to_conj I ((I s).unop Рђб (from_conj I x)),
    simp [to_conj, from_conj, add_smul],
  end,
  zero_smul := ╬╗ x, by { change to_conj I ((I 0).unop Рђб (from_conj I x)) = 0,
                          simp [to_conj, from_conj, zero_smul] } }

end conjugate_semimodule

namespace conj_semimodule
open is_R_or_C

variables {­ЮЋю : Type*} [is_R_or_C ­ЮЋю]
variables {E : Type*} [add_comm_monoid E] [semimodule ­ЮЋю E]
local postfix `Рђа`:100 := @conj ­ЮЋю _
local notation `I` := conj_to_ring_equiv ­ЮЋю

variables (­ЮЋю)
/-- The identity map to the conjugate space -/
@[nolint unused_arguments] def to_conj : E Рєњ conj_semimodule ­ЮЋю E := conjugate_semimodule.to_conj I

/-- The identity map from the conjugate space -/
@[nolint unused_arguments] def from_conj : conj_semimodule ­ЮЋю E Рєњ E := conjugate_semimodule.from_conj I

variables {­ЮЋю}

lemma smul_def {r : ­ЮЋю} {x : E} : to_conj ­ЮЋю (r Рђб x) = rРђа Рђб (to_conj ­ЮЋю x) :=
by simp [to_conj, from_conj, has_scalar.smul, ring_equiv_apply, conjugate_semimodule.to_from_conj]

lemma smul_def' {r : ­ЮЋю} {x : conj_semimodule ­ЮЋю E} : from_conj ­ЮЋю (r Рђб x) = rРђа Рђб (from_conj ­ЮЋю x) :=
begin
  simp [from_conj, to_conj, has_scalar.smul],
end

lemma from_conj_add {x y : conj_semimodule ­ЮЋю E} : from_conj ­ЮЋю (x + y) = from_conj ­ЮЋю x + from_conj ­ЮЋю y := rfl
lemma to_conj_add {x y : E} : to_conj ­ЮЋю (x + y) = to_conj ­ЮЋю x + to_conj ­ЮЋю y := rfl

end conj_semimodule
