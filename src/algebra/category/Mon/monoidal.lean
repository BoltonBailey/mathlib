import data.equiv.basic
import algebra.category.Mon.limits
import category_theory.monoidal.category
--import category_theory.limits.shapes.finite_products

open category_theory category_theory.limits category_theory.iso
open Mon

namespace category_theory.monoidal

def assoc (X Y Z : Mon) : Mon.of (‚Ü•(Mon.of (‚Ü•X √ó ‚Ü•Y)) √ó ‚Ü•Z) ‚âÖ Mon.of (‚Ü•X √ó ‚Ü•(Mon.of (‚Ü•Y √ó ‚Ü•Z))) :=
begin
  apply mul_equiv.to_Mon_iso,
  exact { to_fun := by rintro ‚ü®‚ü®x, y‚ü©, z‚ü©; exact (x, (y, z)),
  inv_fun := by rintro ‚ü®x, ‚ü®y, z‚ü©‚ü©; exact ((x, y), z),
  left_inv := by rintro ‚ü®‚ü®x, y‚ü©, z‚ü©; refl,
  right_inv := by rintro ‚ü®x, ‚ü®y, z‚ü©‚ü©; refl,
  map_mul' := by rintros ‚ü®‚ü®x, y‚ü©,_‚ü© ‚ü®‚ü®x, y‚ü©, _‚ü©; refl, }
end

def of_self_iso (M : Mon) : Mon.of M ‚âÖ M :=
{ hom := ùüô M, inv := ùüô M }

lemma product.lid (M : Mon) : of (punit √ó M) ‚âÉ* M :=
{to_fun := Œª p, p.2,
 inv_fun := Œª p, (1, p),
 left_inv := by intros x; cases x; cases x_fst; refl,
 right_inv := by intros x; refl,
 map_mul' := by intros x y; refl}

lemma product.rid (M : Mon) : of (M √ó punit) ‚âÉ* M :=
{to_fun := Œª p, p.1,
 inv_fun := Œª p, (p, 1),
 left_inv := by intros x; cases x; cases x_snd; refl,
 right_inv := by intros x; refl,
 map_mul' := by intros x y; refl}

lemma left_unitor (M : Mon) : Mon.of (‚Ü•(of punit) √ó ‚Ü•M) ‚âÖ M :=
(mul_equiv.to_Mon_iso (product.lid M)).trans (of_self_iso M)

lemma right_unitor (M : Mon) : Mon.of (‚Ü•M √ó ‚Ü•(of punit)) ‚âÖ M :=
(mul_equiv.to_Mon_iso (product.rid M)).trans (of_self_iso M)

instance Mon_monoidal : monoidal_category Mon := {
  tensor_obj := Œª M N, Mon.of (‚Ü•M √ó ‚Ü•N),
  tensor_hom := Œª _ _ _  _ f g,
  { to_fun := (Œª p, (f p.1, g p.2)),
    map_one' := by tidy,
    map_mul' := by tidy },
  tensor_unit := of punit,
  associator := assoc,
  left_unitor := left_unitor,
  right_unitor := right_unitor
}


/-instance : has_terminal Mon :=
{ has_limits_of_shape :=
  { has_limit := Œª F,
    { cone :=
      { X := default Mon,
        œÄ := by tidy },
      is_limit := by tidy } } }-/

--open category_theory.limits.walking_pair

--local attribute [instance] monoidal_of_has_finite_products

--instance : has_binary_products Mon := infer_instance
--instance : has_terminal Mon := infer_instance
--instance : monoidal_category Mon := monoidal_of_has_finite_products Mon

/-instance : has_binary_products Mon :=
{ has_limits_of_shape :=
  { has_limit := Œª F,
    { cone :=
      { X := Mon.of (F.obj left √ó F.obj right),
        œÄ := { app := begin
                        rintro ‚ü®_|_‚ü©,
                        exact { to_fun := Œª x, x.fst, map_one' := prod.fst_one, map_mul' := prod.fst_mul },
                        exact { to_fun := Œª x, x.snd, map_one' := prod.snd_one, map_mul' := prod.snd_mul },
                      end } },
      is_limit := { lift :=  Œª s, { to_fun := Œª x, ‚ü®s.œÄ.app left x, s.œÄ.app right x‚ü©,
      map_one' := prod.mk_eq_one.mpr ‚ü®monoid_hom.map_one (s.œÄ.app left), monoid_hom.map_one (s.œÄ.app right)‚ü©,
      map_mul' :=
      begin
        intros,
        rw (monoid_hom.map_mul (s.œÄ.app left) x y),
        rw (monoid_hom.map_mul (s.œÄ.app right) x y),
        refl,
      end },
  uniq' := sorry /- begin
    intros,
    ext,
    have := (m x),
    have q := (w left),
    have := ( s.œÄ.app left) x,
    --simp at *,

    --have := congr_fun to_fun q,
    --convert @congr_fun _ _ (Œª x, (m x).fst) ( s.œÄ.app left) q,
  end-/
  } } } }-/

 /-        œÄ :=
        { app := by { rintro ‚ü®_|_‚ü©, exact prod.fst, exact prod.snd, } }, },
      is_limit :=
      { lift := Œª s x, (s.œÄ.app left x, s.œÄ.app right x),
        uniq' := Œª s m w,
        begin
          ext,
          exact congr_fun (w left) x,
          exact congr_fun (w right) x,
        end }, } } }


-/


--monoidal_of_has_finite_products Mon

/- @[simp] lemma tensor_apply {W X Y Z : Mon} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (p : W ‚äó Y) :
(f ‚äó g) p = (f p.1, g p.2) := rfl

@[simp] lemma left_unitor_hom_apply {X : Mon} {x : X} {p : punit} :
  ((Œª_ X).hom : (ùüô_ (Mon)) ‚äó X ‚Üí X) (p, x) = x := rfl
@[simp] lemma left_unitor_inv_apply {X : Mon} {x : X} :
  ((Œª_ X).inv : X ‚ü∂ (ùüô_ (Mon)) ‚äó X) x = (punit.star, x) := rfl

@[simp] lemma right_unitor_hom_apply {X : Mon} {x : X} {p : punit} :
  ((œÅ_ X).hom : X ‚äó (ùüô_ (Mon)) ‚Üí X) (x, p) = x := rfl
@[simp] lemma right_unitor_inv_apply {X : Mon} {x : X} :
  ((œÅ_ X).inv : X ‚ü∂ X ‚äó (ùüô_ (Mon))) x = (x, punit.star) := rfl

@[simp] lemma associator_hom_apply {X Y Z : Mon} {x : X} {y : Y} {z : Z} :
  ((Œ±_ X Y Z).hom : (X ‚äó Y) ‚äó Z ‚Üí X ‚äó (Y ‚äó Z)) ((x, y), z) = (x, (y, z)) := rfl
@[simp] lemma associator_inv_apply {X Y Z : Mon} {x : X} {y : Y} {z : Z} :
  ((Œ±_ X Y Z).inv : X ‚äó (Y ‚äó Z) ‚Üí (X ‚äó Y) ‚äó Z) (x, (y, z)) = ((x, y), z) := rfl -/

end category_theory.monoidal
